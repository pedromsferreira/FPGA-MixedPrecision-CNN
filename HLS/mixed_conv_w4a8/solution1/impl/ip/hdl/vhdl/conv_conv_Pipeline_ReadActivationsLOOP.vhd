-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_conv_Pipeline_ReadActivationsLOOP is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    strm_in_TVALID : IN STD_LOGIC;
    inputMapLineAddr_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    readLimit : IN STD_LOGIC_VECTOR (31 downto 0);
    streamsPerInputLine : IN STD_LOGIC_VECTOR (31 downto 0);
    inputMapLineAddr_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    inputMapLineAddr_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    inputMapLineAddr_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    inputMapLineAddr_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    inputMap_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    inputMap_V_ce0 : OUT STD_LOGIC;
    inputMap_V_we0 : OUT STD_LOGIC;
    inputMap_V_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    zext_ln298 : IN STD_LOGIC_VECTOR (2 downto 0);
    paddingIters : IN STD_LOGIC_VECTOR (31 downto 0);
    xPadUpperLimit : IN STD_LOGIC_VECTOR (31 downto 0);
    yPadUpperLimit : IN STD_LOGIC_VECTOR (31 downto 0);
    strm_in_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    strm_in_TREADY : OUT STD_LOGIC;
    strm_in_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    strm_in_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    strm_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    readLines_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    readLines_out_ap_vld : OUT STD_LOGIC;
    id_save_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    id_save_out_ap_vld : OUT STD_LOGIC;
    idx_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    idx_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of conv_conv_Pipeline_ReadActivationsLOOP is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln95_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln98_2_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op53_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal strm_in_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln298_cast_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln298_cast_reg_600 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln71_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal saveAddr_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal saveAddr_7_fu_464_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_3_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln105_fu_456_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal id_save_5_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal id_save_9_fu_448_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal id_save_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal id_save_8_fu_440_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal readLines_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal readLines_5_fu_432_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln98_2_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_3_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_1_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln98_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln98_1_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln98_1_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln98_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln104_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln107_fu_381_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal id_save_6_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln109_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln329_fu_391_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal id_save_7_fu_409_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln105_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal readLines_4_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln329_fu_417_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal saveAddr_5_fu_421_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal saveAddr_6_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_139 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component conv_mux_53_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_53_32_1_1_U52 : component conv_mux_53_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => inputMapLineAddr_reload,
        din1 => inputMapLineAddr_1_reload,
        din2 => inputMapLineAddr_2_reload,
        din3 => inputMapLineAddr_3_reload,
        din4 => inputMapLineAddr_4_reload,
        din5 => id_save_7_fu_409_p3,
        dout => saveAddr_5_fu_421_p7);

    flow_control_loop_pipe_sequential_init_U : component conv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_3_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_3_fu_90 <= ap_const_lv32_0;
                elsif (((icmp_ln95_fu_276_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_3_fu_90 <= i_4_fu_281_p2;
                end if;
            end if; 
        end if;
    end process;

    id_save_5_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    id_save_5_fu_98 <= ap_const_lv32_0;
                elsif (((icmp_ln95_fu_276_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    id_save_5_fu_98 <= id_save_9_fu_448_p3;
                end if;
            end if; 
        end if;
    end process;

    id_save_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    id_save_fu_102 <= ap_const_lv32_0;
                elsif (((icmp_ln95_fu_276_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    id_save_fu_102 <= id_save_8_fu_440_p3;
                end if;
            end if; 
        end if;
    end process;

    idx_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    idx_fu_94 <= ap_const_lv32_0;
                elsif (((icmp_ln95_fu_276_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    idx_fu_94 <= select_ln105_fu_456_p3;
                end if;
            end if; 
        end if;
    end process;

    readLines_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    readLines_fu_106 <= ap_const_lv32_0;
                elsif (((icmp_ln95_fu_276_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    readLines_fu_106 <= readLines_5_fu_432_p3;
                end if;
            end if; 
        end if;
    end process;

    saveAddr_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    saveAddr_fu_86 <= inputMapLineAddr_reload;
                elsif (((icmp_ln95_fu_276_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    saveAddr_fu_86 <= saveAddr_7_fu_464_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln298_cast_reg_600(2 downto 0) <= zext_ln298_cast_fu_231_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln298_cast_reg_600(31 downto 3) <= "00000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln104_fu_370_p2 <= std_logic_vector(unsigned(idx_fu_94) + unsigned(ap_const_lv32_1));
    add_ln329_fu_391_p2 <= std_logic_vector(unsigned(trunc_ln107_fu_381_p1) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, strm_in_TVALID, ap_predicate_op53_read_state2)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_predicate_op53_read_state2 = ap_const_boolean_1) and (strm_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, strm_in_TVALID, ap_predicate_op53_read_state2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_predicate_op53_read_state2 = ap_const_boolean_1) and (strm_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, strm_in_TVALID, ap_predicate_op53_read_state2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_predicate_op53_read_state2 = ap_const_boolean_1) and (strm_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(strm_in_TVALID, ap_predicate_op53_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op53_read_state2 = ap_const_boolean_1) and (strm_in_TVALID = ap_const_logic_0));
    end process;


    ap_condition_139_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln95_fu_276_p2, ap_block_pp0_stage0)
    begin
                ap_condition_139 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln95_fu_276_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln95_fu_276_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln95_fu_276_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_predicate_op53_read_state2_assign_proc : process(icmp_ln95_fu_276_p2, or_ln98_2_fu_331_p2)
    begin
                ap_predicate_op53_read_state2 <= ((or_ln98_2_fu_331_p2 = ap_const_lv1_0) and (icmp_ln95_fu_276_p2 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    i_4_fu_281_p2 <= std_logic_vector(unsigned(i_3_fu_90) + unsigned(ap_const_lv32_1));
    icmp_ln105_fu_376_p2 <= "1" when (streamsPerInputLine = add_ln104_fu_370_p2) else "0";
    icmp_ln109_fu_403_p2 <= "1" when (unsigned(id_save_6_fu_385_p2) > unsigned(ap_const_lv32_4)) else "0";
    icmp_ln95_fu_276_p2 <= "1" when (i_3_fu_90 = readLimit) else "0";
    icmp_ln98_1_fu_292_p2 <= "1" when (unsigned(paddingIters) > unsigned(idx_fu_94)) else "0";
    icmp_ln98_2_fu_297_p2 <= "1" when (unsigned(idx_fu_94) < unsigned(xPadUpperLimit)) else "0";
    icmp_ln98_3_fu_308_p2 <= "1" when (unsigned(readLines_fu_106) < unsigned(yPadUpperLimit)) else "0";
    icmp_ln98_fu_287_p2 <= "1" when (unsigned(readLines_fu_106) < unsigned(zext_ln298_cast_reg_600)) else "0";
    id_save_6_fu_385_p2 <= std_logic_vector(unsigned(id_save_5_fu_98) + unsigned(ap_const_lv32_1));
    id_save_7_fu_409_p3 <= 
        ap_const_lv3_0 when (icmp_ln109_fu_403_p2(0) = '1') else 
        add_ln329_fu_391_p2;
    id_save_8_fu_440_p3 <= 
        zext_ln329_fu_417_p1 when (icmp_ln105_fu_376_p2(0) = '1') else 
        id_save_fu_102;
    id_save_9_fu_448_p3 <= 
        zext_ln329_fu_417_p1 when (icmp_ln105_fu_376_p2(0) = '1') else 
        id_save_5_fu_98;
    id_save_out <= id_save_fu_102;

    id_save_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln95_fu_276_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln95_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            id_save_out_ap_vld <= ap_const_logic_1;
        else 
            id_save_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    idx_out <= idx_fu_94;

    idx_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln95_fu_276_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln95_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            idx_out_ap_vld <= ap_const_logic_1;
        else 
            idx_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    inputMap_V_address0_assign_proc : process(or_ln98_2_fu_331_p2, zext_ln71_fu_345_p1, zext_ln61_fu_350_p1, ap_condition_139)
    begin
        if ((ap_const_boolean_1 = ap_condition_139)) then
            if ((or_ln98_2_fu_331_p2 = ap_const_lv1_1)) then 
                inputMap_V_address0 <= zext_ln61_fu_350_p1(11 - 1 downto 0);
            elsif ((or_ln98_2_fu_331_p2 = ap_const_lv1_0)) then 
                inputMap_V_address0 <= zext_ln71_fu_345_p1(11 - 1 downto 0);
            else 
                inputMap_V_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            inputMap_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    inputMap_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln95_fu_276_p2, or_ln98_2_fu_331_p2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln98_2_fu_331_p2 = ap_const_lv1_0) and (icmp_ln95_fu_276_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln98_2_fu_331_p2 = ap_const_lv1_1) and (icmp_ln95_fu_276_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            inputMap_V_ce0 <= ap_const_logic_1;
        else 
            inputMap_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inputMap_V_d0_assign_proc : process(or_ln98_2_fu_331_p2, strm_in_TDATA, ap_condition_139)
    begin
        if ((ap_const_boolean_1 = ap_condition_139)) then
            if ((or_ln98_2_fu_331_p2 = ap_const_lv1_1)) then 
                inputMap_V_d0 <= ap_const_lv128_lc_2;
            elsif ((or_ln98_2_fu_331_p2 = ap_const_lv1_0)) then 
                inputMap_V_d0 <= strm_in_TDATA;
            else 
                inputMap_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inputMap_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    inputMap_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln95_fu_276_p2, or_ln98_2_fu_331_p2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln98_2_fu_331_p2 = ap_const_lv1_0) and (icmp_ln95_fu_276_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln98_2_fu_331_p2 = ap_const_lv1_1) and (icmp_ln95_fu_276_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            inputMap_V_we0 <= ap_const_logic_1;
        else 
            inputMap_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln98_1_fu_325_p2 <= (xor_ln98_fu_302_p2 or xor_ln98_1_fu_313_p2);
    or_ln98_2_fu_331_p2 <= (or_ln98_fu_319_p2 or or_ln98_1_fu_325_p2);
    or_ln98_fu_319_p2 <= (icmp_ln98_fu_287_p2 or icmp_ln98_1_fu_292_p2);
    readLines_4_fu_397_p2 <= std_logic_vector(unsigned(readLines_fu_106) + unsigned(ap_const_lv32_1));
    readLines_5_fu_432_p3 <= 
        readLines_4_fu_397_p2 when (icmp_ln105_fu_376_p2(0) = '1') else 
        readLines_fu_106;
    readLines_out <= readLines_fu_106;

    readLines_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln95_fu_276_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln95_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            readLines_out_ap_vld <= ap_const_logic_1;
        else 
            readLines_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    saveAddr_6_fu_364_p2 <= std_logic_vector(unsigned(saveAddr_fu_86) + unsigned(ap_const_lv32_1));
    saveAddr_7_fu_464_p3 <= 
        saveAddr_5_fu_421_p7 when (icmp_ln105_fu_376_p2(0) = '1') else 
        saveAddr_6_fu_364_p2;
    select_ln105_fu_456_p3 <= 
        ap_const_lv32_0 when (icmp_ln105_fu_376_p2(0) = '1') else 
        add_ln104_fu_370_p2;

    strm_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, strm_in_TVALID, ap_predicate_op53_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op53_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            strm_in_TDATA_blk_n <= strm_in_TVALID;
        else 
            strm_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op53_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op53_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            strm_in_TREADY <= ap_const_logic_1;
        else 
            strm_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln107_fu_381_p1 <= id_save_5_fu_98(3 - 1 downto 0);
    xor_ln98_1_fu_313_p2 <= (icmp_ln98_3_fu_308_p2 xor ap_const_lv1_1);
    xor_ln98_fu_302_p2 <= (icmp_ln98_2_fu_297_p2 xor ap_const_lv1_1);
    zext_ln298_cast_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln298),32));
    zext_ln329_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(id_save_7_fu_409_p3),32));
    zext_ln61_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(saveAddr_fu_86),64));
    zext_ln71_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(saveAddr_fu_86),64));
end behav;
