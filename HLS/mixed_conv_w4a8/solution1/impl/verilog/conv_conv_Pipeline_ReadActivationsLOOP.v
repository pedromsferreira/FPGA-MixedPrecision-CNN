// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_conv_Pipeline_ReadActivationsLOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        strm_in_TVALID,
        inputMapLineAddr_reload,
        readLimit,
        streamsPerInputLine,
        inputMapLineAddr_1_reload,
        inputMapLineAddr_2_reload,
        inputMapLineAddr_3_reload,
        inputMapLineAddr_4_reload,
        inputMap_V_address0,
        inputMap_V_ce0,
        inputMap_V_we0,
        inputMap_V_d0,
        zext_ln298,
        paddingIters,
        xPadUpperLimit,
        yPadUpperLimit,
        strm_in_TDATA,
        strm_in_TREADY,
        strm_in_TKEEP,
        strm_in_TSTRB,
        strm_in_TLAST,
        readLines_out,
        readLines_out_ap_vld,
        id_save_out,
        id_save_out_ap_vld,
        idx_out,
        idx_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   strm_in_TVALID;
input  [31:0] inputMapLineAddr_reload;
input  [31:0] readLimit;
input  [31:0] streamsPerInputLine;
input  [31:0] inputMapLineAddr_1_reload;
input  [31:0] inputMapLineAddr_2_reload;
input  [31:0] inputMapLineAddr_3_reload;
input  [31:0] inputMapLineAddr_4_reload;
output  [10:0] inputMap_V_address0;
output   inputMap_V_ce0;
output   inputMap_V_we0;
output  [127:0] inputMap_V_d0;
input  [2:0] zext_ln298;
input  [31:0] paddingIters;
input  [31:0] xPadUpperLimit;
input  [31:0] yPadUpperLimit;
input  [127:0] strm_in_TDATA;
output   strm_in_TREADY;
input  [15:0] strm_in_TKEEP;
input  [15:0] strm_in_TSTRB;
input  [0:0] strm_in_TLAST;
output  [31:0] readLines_out;
output   readLines_out_ap_vld;
output  [31:0] id_save_out;
output   id_save_out_ap_vld;
output  [31:0] idx_out;
output   idx_out_ap_vld;

reg ap_idle;
reg[10:0] inputMap_V_address0;
reg inputMap_V_ce0;
reg inputMap_V_we0;
reg[127:0] inputMap_V_d0;
reg strm_in_TREADY;
reg readLines_out_ap_vld;
reg id_save_out_ap_vld;
reg idx_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln95_fu_276_p2;
wire   [0:0] or_ln98_2_fu_331_p2;
reg    ap_predicate_op53_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    strm_in_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] zext_ln298_cast_fu_231_p1;
reg   [31:0] zext_ln298_cast_reg_600;
wire   [63:0] zext_ln71_fu_345_p1;
wire   [63:0] zext_ln61_fu_350_p1;
reg   [31:0] saveAddr_fu_86;
wire   [31:0] saveAddr_7_fu_464_p3;
wire    ap_loop_init;
reg   [31:0] i_3_fu_90;
wire   [31:0] i_4_fu_281_p2;
reg   [31:0] idx_fu_94;
wire   [31:0] select_ln105_fu_456_p3;
reg   [31:0] id_save_5_fu_98;
wire   [31:0] id_save_9_fu_448_p3;
reg   [31:0] id_save_fu_102;
wire   [31:0] id_save_8_fu_440_p3;
reg   [31:0] readLines_fu_106;
wire   [31:0] readLines_5_fu_432_p3;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln98_2_fu_297_p2;
wire   [0:0] icmp_ln98_3_fu_308_p2;
wire   [0:0] icmp_ln98_fu_287_p2;
wire   [0:0] icmp_ln98_1_fu_292_p2;
wire   [0:0] xor_ln98_fu_302_p2;
wire   [0:0] xor_ln98_1_fu_313_p2;
wire   [0:0] or_ln98_1_fu_325_p2;
wire   [0:0] or_ln98_fu_319_p2;
wire   [31:0] add_ln104_fu_370_p2;
wire   [2:0] trunc_ln107_fu_381_p1;
wire   [31:0] id_save_6_fu_385_p2;
wire   [0:0] icmp_ln109_fu_403_p2;
wire   [2:0] add_ln329_fu_391_p2;
wire   [2:0] id_save_7_fu_409_p3;
wire   [0:0] icmp_ln105_fu_376_p2;
wire   [31:0] readLines_4_fu_397_p2;
wire   [31:0] zext_ln329_fu_417_p1;
wire   [31:0] saveAddr_5_fu_421_p7;
wire   [31:0] saveAddr_6_fu_364_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_139;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

conv_mux_53_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_53_32_1_1_U52(
    .din0(inputMapLineAddr_reload),
    .din1(inputMapLineAddr_1_reload),
    .din2(inputMapLineAddr_2_reload),
    .din3(inputMapLineAddr_3_reload),
    .din4(inputMapLineAddr_4_reload),
    .din5(id_save_7_fu_409_p3),
    .dout(saveAddr_5_fu_421_p7)
);

conv_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_3_fu_90 <= 32'd0;
        end else if (((icmp_ln95_fu_276_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_3_fu_90 <= i_4_fu_281_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            id_save_5_fu_98 <= 32'd0;
        end else if (((icmp_ln95_fu_276_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            id_save_5_fu_98 <= id_save_9_fu_448_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            id_save_fu_102 <= 32'd0;
        end else if (((icmp_ln95_fu_276_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            id_save_fu_102 <= id_save_8_fu_440_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            idx_fu_94 <= 32'd0;
        end else if (((icmp_ln95_fu_276_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            idx_fu_94 <= select_ln105_fu_456_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            readLines_fu_106 <= 32'd0;
        end else if (((icmp_ln95_fu_276_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            readLines_fu_106 <= readLines_5_fu_432_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            saveAddr_fu_86 <= inputMapLineAddr_reload;
        end else if (((icmp_ln95_fu_276_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            saveAddr_fu_86 <= saveAddr_7_fu_464_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln298_cast_reg_600[2 : 0] <= zext_ln298_cast_fu_231_p1[2 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln95_fu_276_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln95_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        id_save_out_ap_vld = 1'b1;
    end else begin
        id_save_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln95_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        idx_out_ap_vld = 1'b1;
    end else begin
        idx_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_139)) begin
        if ((or_ln98_2_fu_331_p2 == 1'd1)) begin
            inputMap_V_address0 = zext_ln61_fu_350_p1;
        end else if ((or_ln98_2_fu_331_p2 == 1'd0)) begin
            inputMap_V_address0 = zext_ln71_fu_345_p1;
        end else begin
            inputMap_V_address0 = 'bx;
        end
    end else begin
        inputMap_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (or_ln98_2_fu_331_p2 == 1'd0) & (icmp_ln95_fu_276_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (or_ln98_2_fu_331_p2 == 1'd1) & (icmp_ln95_fu_276_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        inputMap_V_ce0 = 1'b1;
    end else begin
        inputMap_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_139)) begin
        if ((or_ln98_2_fu_331_p2 == 1'd1)) begin
            inputMap_V_d0 = 128'd0;
        end else if ((or_ln98_2_fu_331_p2 == 1'd0)) begin
            inputMap_V_d0 = strm_in_TDATA;
        end else begin
            inputMap_V_d0 = 'bx;
        end
    end else begin
        inputMap_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (or_ln98_2_fu_331_p2 == 1'd0) & (icmp_ln95_fu_276_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (or_ln98_2_fu_331_p2 == 1'd1) & (icmp_ln95_fu_276_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        inputMap_V_we0 = 1'b1;
    end else begin
        inputMap_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln95_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        readLines_out_ap_vld = 1'b1;
    end else begin
        readLines_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op53_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_in_TDATA_blk_n = strm_in_TVALID;
    end else begin
        strm_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op53_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_in_TREADY = 1'b1;
    end else begin
        strm_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln104_fu_370_p2 = (idx_fu_94 + 32'd1);

assign add_ln329_fu_391_p2 = (trunc_ln107_fu_381_p1 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_predicate_op53_read_state2 == 1'b1) & (strm_in_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_predicate_op53_read_state2 == 1'b1) & (strm_in_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_predicate_op53_read_state2 == 1'b1) & (strm_in_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op53_read_state2 == 1'b1) & (strm_in_TVALID == 1'b0));
end

always @ (*) begin
    ap_condition_139 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln95_fu_276_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

always @ (*) begin
    ap_predicate_op53_read_state2 = ((or_ln98_2_fu_331_p2 == 1'd0) & (icmp_ln95_fu_276_p2 == 1'd0));
end

assign i_4_fu_281_p2 = (i_3_fu_90 + 32'd1);

assign icmp_ln105_fu_376_p2 = ((streamsPerInputLine == add_ln104_fu_370_p2) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_403_p2 = ((id_save_6_fu_385_p2 > 32'd4) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_276_p2 = ((i_3_fu_90 == readLimit) ? 1'b1 : 1'b0);

assign icmp_ln98_1_fu_292_p2 = ((paddingIters > idx_fu_94) ? 1'b1 : 1'b0);

assign icmp_ln98_2_fu_297_p2 = ((idx_fu_94 < xPadUpperLimit) ? 1'b1 : 1'b0);

assign icmp_ln98_3_fu_308_p2 = ((readLines_fu_106 < yPadUpperLimit) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_287_p2 = ((readLines_fu_106 < zext_ln298_cast_reg_600) ? 1'b1 : 1'b0);

assign id_save_6_fu_385_p2 = (id_save_5_fu_98 + 32'd1);

assign id_save_7_fu_409_p3 = ((icmp_ln109_fu_403_p2[0:0] == 1'b1) ? 3'd0 : add_ln329_fu_391_p2);

assign id_save_8_fu_440_p3 = ((icmp_ln105_fu_376_p2[0:0] == 1'b1) ? zext_ln329_fu_417_p1 : id_save_fu_102);

assign id_save_9_fu_448_p3 = ((icmp_ln105_fu_376_p2[0:0] == 1'b1) ? zext_ln329_fu_417_p1 : id_save_5_fu_98);

assign id_save_out = id_save_fu_102;

assign idx_out = idx_fu_94;

assign or_ln98_1_fu_325_p2 = (xor_ln98_fu_302_p2 | xor_ln98_1_fu_313_p2);

assign or_ln98_2_fu_331_p2 = (or_ln98_fu_319_p2 | or_ln98_1_fu_325_p2);

assign or_ln98_fu_319_p2 = (icmp_ln98_fu_287_p2 | icmp_ln98_1_fu_292_p2);

assign readLines_4_fu_397_p2 = (readLines_fu_106 + 32'd1);

assign readLines_5_fu_432_p3 = ((icmp_ln105_fu_376_p2[0:0] == 1'b1) ? readLines_4_fu_397_p2 : readLines_fu_106);

assign readLines_out = readLines_fu_106;

assign saveAddr_6_fu_364_p2 = (saveAddr_fu_86 + 32'd1);

assign saveAddr_7_fu_464_p3 = ((icmp_ln105_fu_376_p2[0:0] == 1'b1) ? saveAddr_5_fu_421_p7 : saveAddr_6_fu_364_p2);

assign select_ln105_fu_456_p3 = ((icmp_ln105_fu_376_p2[0:0] == 1'b1) ? 32'd0 : add_ln104_fu_370_p2);

assign trunc_ln107_fu_381_p1 = id_save_5_fu_98[2:0];

assign xor_ln98_1_fu_313_p2 = (icmp_ln98_3_fu_308_p2 ^ 1'd1);

assign xor_ln98_fu_302_p2 = (icmp_ln98_2_fu_297_p2 ^ 1'd1);

assign zext_ln298_cast_fu_231_p1 = zext_ln298;

assign zext_ln329_fu_417_p1 = id_save_7_fu_409_p3;

assign zext_ln61_fu_350_p1 = saveAddr_fu_86;

assign zext_ln71_fu_345_p1 = saveAddr_fu_86;

always @ (posedge ap_clk) begin
    zext_ln298_cast_reg_600[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //conv_conv_Pipeline_ReadActivationsLOOP
