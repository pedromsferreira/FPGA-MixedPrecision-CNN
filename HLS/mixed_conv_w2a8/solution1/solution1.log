==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
INFO: [SYN 201-201] Setting up clock 'default' with a period of 10ns.
INFO: [SYN 201-201] Setting up clock 'default' with an uncertainty of 0ns.
INFO: [HLS 200-1611] Setting target device to 'xczu7ev-ffvc1156-2-e'
INFO: [HLS 200-1505] Using flow_target 'vivado'
INFO: [HLS 200-1510] Running: set_part xczu7ev-ffvc1156-2-e 
INFO: [HLS 200-1510] Running: create_clock -period 10 -name default 
INFO: [SYN 201-201] Setting up clock 'default' with a period of 10ns.
INFO: [HLS 200-1510] Running: set_clock_uncertainty 0 
INFO: [HLS 200-1510] Running: csynth_design 
INFO: [HLS 200-111] Finished File checks and directory preparation: CPU user time: 0 seconds. CPU system time: 0.01 seconds. Elapsed time: 10.02 seconds; current allocated memory: 223.883 MB.
INFO: [HLS 200-10] Analyzing design file 'sources/mixed_conv_w2/mixed_conv.cpp' ... 
INFO: [HLS 200-111] Finished Source Code Analysis and Preprocessing: CPU user time: 3.05 seconds. CPU system time: 0.28 seconds. Elapsed time: 3.36 seconds; current allocated memory: 224.824 MB.
INFO: [HLS 200-777] Using interface defaults for 'Vivado' flow target.
INFO: [HLS 214-131] Inlining function 'read_stream_weights(ap_int<32>*, unsigned int*, int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_weights(ap_int<32> (*) [288], unsigned int, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:204:2)
INFO: [HLS 214-131] Inlining function 'save_padding_pixel(ap_int<128>*, unsigned int)' into 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:99:4)
INFO: [HLS 214-131] Inlining function 'read_stream_activations(ap_int<128>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:101:4)
INFO: [HLS 214-131] Inlining function 'save_padding_pixel(ap_int<128>*, unsigned int)' into 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:136:3)
INFO: [HLS 214-131] Inlining function 'read_stream_activations(ap_int<128>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:138:3)
INFO: [HLS 214-131] Inlining function 'PE(ap_int<128>, ap_int<32>, ap_int<32>*, bool)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:503:10)
INFO: [HLS 214-131] Inlining function 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:459:9)
INFO: [HLS 214-291] Loop 'WeightBusSeparationLOOP' is marked as complete unroll implied by the pipeline pragma (sources/mixed_conv_w2/mixed_conv.cpp:164:2)
INFO: [HLS 214-186] Unrolling loop 'AccumResetLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:471:9) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-186] Unrolling loop 'PECallLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:485:8) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-186] Unrolling loop 'PEOperationLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:18:2) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-186] Unrolling loop 'WeightBusSeparationLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:164:2) in function 'read_weights' completely with a factor of 4 (sources/mixed_conv_w2/mixed_conv.cpp:184:0)
INFO: [HLS 214-178] Inlining function 'read_bias(ap_int<8>*, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-178] Inlining function 'read_weights(ap_int<32> (*) [288], unsigned int, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-178] Inlining function 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-248] Applying array_partition to 'filter': Complete partitioning on dimension 1. Cyclic partitioning with factor 4 on dimension 2. (sources/mixed_conv_w2/mixed_conv.cpp:285:15)
INFO: [HLS 214-248] Applying array_partition to 'inputMapLineAddr': Complete partitioning on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:287:6)
INFO: [HLS 214-248] Applying array_partition to 'bias': Cyclic partitioning with factor 16 on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:288:9)
INFO: [HLS 214-248] Applying array_partition to 'accum': Complete partitioning on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:289:10)
INFO: [HLS 200-111] Finished Compiling Optimization and Transform: CPU user time: 5.84 seconds. CPU system time: 0.27 seconds. Elapsed time: 6.12 seconds; current allocated memory: 225.938 MB.
INFO: [HLS 200-111] Finished Checking Pragmas: CPU user time: 0 seconds. CPU system time: 0 seconds. Elapsed time: 0 seconds; current allocated memory: 225.938 MB.
INFO: [HLS 200-10] Starting code transformations ...
INFO: [HLS 200-111] Finished Standard Transforms: CPU user time: 1.74 seconds. CPU system time: 0 seconds. Elapsed time: 1.73 seconds; current allocated memory: 261.359 MB.
INFO: [HLS 200-10] Checking synthesizability ...
WARNING: [SYNCHK 200-23] /home/mpv/tools/Xilinx/Vitis_HLS/2022.2/common/technology/autopilot/ap_int_ref.h:628: variable-indexed range selection may cause suboptimal QoR.
INFO: [SYNCHK 200-10] 0 error(s), 1 warning(s).
INFO: [HLS 200-111] Finished Checking Synthesizability: CPU user time: 1.86 seconds. CPU system time: 0.01 seconds. Elapsed time: 1.87 seconds; current allocated memory: 271.750 MB.
INFO: [XFORM 203-510] Pipelining loop 'ChannelLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289) in function 'conv_w2' automatically.
INFO: [XFORM 203-502] Unrolling all sub-loops inside loop 'ChannelLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289) in function 'conv_w2' for pipelining.
INFO: [HLS 200-489] Unrolling loop 'AccumAdjustmentLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289) in function 'conv_w2' completely with a factor of 16.
INFO: [HLS 200-489] Unrolling loop 'OutputStreamPackLOOP' in function 'conv_w2' completely with a factor of 16.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:174:12) to (sources/mixed_conv_w2/mixed_conv.cpp:195:2) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:103:11) to (sources/mixed_conv_w2/mixed_conv.cpp:95:2) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:418:56) to (sources/mixed_conv_w2/mixed_conv.cpp:458:11) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:380:7) to (sources/mixed_conv_w2/mixed_conv.cpp:511:11) in function 'conv_w2'... converting 610 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:140:8) to (sources/mixed_conv_w2/mixed_conv.cpp:466:8) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:518:21) in function 'conv_w2'... converting 33 basic blocks.
INFO: [XFORM 203-11] Balancing expressions in function 'conv_w2' (sources/mixed_conv_w2/mixed_conv.cpp:61:8)...518 expression(s) balanced.
INFO: [HLS 200-111] Finished Loop, function and other optimizations: CPU user time: 3.87 seconds. CPU system time: 0.01 seconds. Elapsed time: 3.87 seconds; current allocated memory: 345.875 MB.
INFO: [XFORM 203-541] Flattening a loop nest 'ReadBiasStreamsLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:233:14) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'KernelXLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'KernelYLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'FilterLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'OutXLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'OutYLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [HLS 200-472] Inferring partial write operation for 'bias.V' (sources/mixed_conv_w2/mixed_conv.cpp:247:24)
INFO: [HLS 200-472] Inferring partial write operation for 'filter.V.1' (sources/mixed_conv_w2/mixed_conv.cpp:171:27)
INFO: [HLS 200-472] Inferring partial write operation for 'inputMap.V' (sources/mixed_conv_w2/mixed_conv.cpp:61:21)
INFO: [HLS 200-472] Inferring partial write operation for 'inputMap.V' (sources/mixed_conv_w2/mixed_conv.cpp:71:21)
INFO: [HLS 200-111] Finished Architecture Synthesis: CPU user time: 0.97 seconds. CPU system time: 0.02 seconds. Elapsed time: 1 seconds; current allocated memory: 385.375 MB.
INFO: [HLS 200-10] Starting hardware synthesis ...
INFO: [HLS 200-10] Synthesizing 'conv_w2' ...
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_VITIS_LOOP_331_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'VITIS_LOOP_331_1'.
INFO: [HLS 200-1470] Pipelining result : Target II = 1, Final II = 1, Depth = 1, loop 'VITIS_LOOP_331_1'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.06 seconds. CPU system time: 0.02 seconds. Elapsed time: 0.08 seconds; current allocated memory: 387.094 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.01 seconds. CPU system time: 0 seconds. Elapsed time: 0.01 seconds; current allocated memory: 387.094 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_241_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadBiasStreamsLOOP_VITIS_LOOP_241_1'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 3, loop 'ReadBiasStreamsLOOP_VITIS_LOOP_241_1'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.08 seconds. CPU system time: 0 seconds. Elapsed time: 0.08 seconds; current allocated memory: 388.621 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.05 seconds. CPU system time: 0 seconds. Elapsed time: 0.04 seconds; current allocated memory: 388.621 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadWeightStreamsLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 2, loop 'ReadWeightStreamsLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.57 seconds. CPU system time: 0 seconds. Elapsed time: 0.58 seconds; current allocated memory: 397.676 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.13 seconds. CPU system time: 0 seconds. Elapsed time: 0.13 seconds; current allocated memory: 397.676 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadActivationsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadActivationsLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 2, loop 'ReadActivationsLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.17 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.17 seconds; current allocated memory: 397.676 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.04 seconds. CPU system time: 0 seconds. Elapsed time: 0.04 seconds; current allocated memory: 397.676 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_509) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_511) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_508) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_506) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_504) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_502) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_500) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_498) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_496) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_493) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_495) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_492) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_490) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_488) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_486) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_484) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_482) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_480) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_477) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_479) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_476) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_474) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_472) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_470) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_468) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_466) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_464) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_461) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_463) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_460) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_458) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_456) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_454) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_452) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_450) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_448) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_445) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_447) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_444) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_442) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_440) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_438) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_436) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_434) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_432) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_429) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_431) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_428) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_426) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_424) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_422) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_420) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_418) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_416) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_413) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_415) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_412) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_410) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_408) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_406) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_404) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_402) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_400) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_397) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_399) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_396) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_394) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_392) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_390) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_388) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_386) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_384) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_381) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_383) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_380) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_378) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_376) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_374) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_372) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_370) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_368) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_365) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_367) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_364) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_362) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_360) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_358) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_356) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_354) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_352) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_349) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_351) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_348) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_346) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_344) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_342) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_340) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_338) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_336) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_333) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_335) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_332) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_330) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_328) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_326) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_324) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_322) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_320) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_317) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_319) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_316) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_314) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_312) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_310) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_308) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_306) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_304) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_301) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_303) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_300) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_298) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_296) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_294) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_292) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_290) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_288) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_285) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_287) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_284) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_282) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_280) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_278) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_276) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_274) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_272) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_269) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_271) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_268) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_266) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_264) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_262) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_260) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_258) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_256) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_253) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_255) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_252) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_250) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_248) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_246) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_244) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_242) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_240) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_237) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_239) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_236) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_234) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_232) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_230) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_228) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_226) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_224) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_221) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_223) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_220) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_218) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_216) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_214) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_212) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_210) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_208) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_205) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_207) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_204) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_202) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_200) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_198) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_196) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_194) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_192) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_189) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_191) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_188) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_186) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_184) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_182) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_180) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_178) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_176) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_173) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_175) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_172) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_170) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_168) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_166) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_164) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_162) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_160) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_157) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_159) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_156) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_154) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_152) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_150) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_148) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_146) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_144) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_141) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_143) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_140) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_138) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_136) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_134) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_132) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_130) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_128) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_125) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_127) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_124) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_122) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_120) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_118) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_116) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_114) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_112) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_109) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_111) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_108) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_106) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_104) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_102) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_100) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_98) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_96) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_93) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_95) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_92) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_90) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_88) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_86) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_84) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_82) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_80) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_77) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_79) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_76) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_74) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_72) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_70) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_68) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_66) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_64) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_62) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_63) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_60) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_58) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_56) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_54) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_52) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_50) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_48) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_45) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_47) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_44) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_42) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_40) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_38) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_36) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_34) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_32) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_30) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_31) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_28) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_26) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_24) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_22) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_20) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_18) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_16) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_13) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_15) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_12) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_10) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_8) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_6) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_4) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_2) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V) to 3 in order to utilize available DSP registers.
INFO: [SCHED 204-61] Pipelining loop 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 8, loop 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 3.46 seconds. CPU system time: 0.03 seconds. Elapsed time: 3.5 seconds; current allocated memory: 458.078 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 2 seconds. CPU system time: 0 seconds. Elapsed time: 2 seconds; current allocated memory: 458.078 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [HLS 200-486] Changing DSP latency (root=streamsPerFilter) to 3 in order to utilize available DSP registers.
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 2.97 seconds. CPU system time: 0 seconds. Elapsed time: 2.97 seconds; current allocated memory: 458.078 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 1.02 seconds. CPU system time: 0 seconds. Elapsed time: 1.02 seconds; current allocated memory: 458.078 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_VITIS_LOOP_331_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [RTGEN 206-100] Generating core module 'mul_2ns_32s_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_VITIS_LOOP_331_1'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 2.56 seconds. CPU system time: 0 seconds. Elapsed time: 2.56 seconds; current allocated memory: 458.078 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_241_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_241_1' pipeline 'ReadBiasStreamsLOOP_VITIS_LOOP_241_1' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_241_1'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.05 seconds. CPU system time: 0 seconds. Elapsed time: 0.05 seconds; current allocated memory: 458.078 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' pipeline 'ReadWeightStreamsLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadWeightStreamsLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.29 seconds. CPU system time: 0 seconds. Elapsed time: 0.29 seconds; current allocated memory: 458.078 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadActivationsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadActivationsLOOP' pipeline 'ReadActivationsLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Generating core module 'mux_42_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadActivationsLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.42 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.42 seconds; current allocated memory: 458.078 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' pipeline 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_10s_11_4_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_11s_12_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_32s_32_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_11s_12_4_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_12s_12_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_32s_32_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_3ns_13_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_13ns_3ns_16_1_1': 3 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_16ns_30s_32_1_1': 4 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32s_2ns_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_30s_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3s_2ns_3_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_8ns_2s_10_1_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_9s_2s_11_1_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mux_42_32_1_1': 18 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.86 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.87 seconds; current allocated memory: 492.945 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2' 
INFO: [HLS 200-10] ----------------------------------------------------------------
WARNING: [RTGEN 206-101] Design contains AXI ports. Reset is fixed to synchronous and active low.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_data_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_keep_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_strb_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_last_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_data_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_keep_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_strb_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_last_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/numFilters' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/numKernels' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/inputMapSizeX' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/inputMapSizeY' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/ctrl' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on function 'conv_w2' to 's_axilite & ap_ctrl_hs'.
INFO: [RTGEN 206-100] Bundling port 'numFilters', 'numKernels', 'inputMapSizeX', 'inputMapSizeY', 'ctrl' and 'return' to AXI-Lite port BUS1.
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_34ns_44_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_44ns_54_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_54ns_64_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_30s_32s_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_30s_3ns_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32ns_2ns_34_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32s_32s_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_28ns_31_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_31ns_34_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_3ns_6_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_mul_6ns_28s_32_4_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'sdiv_33ns_3ns_10_37_seq_1': 2 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2'.
INFO: [RTMG 210-278] Implementing memory 'conv_w2_filter_V_RAM_AUTO_1R1W' using auto RAMs.
INFO: [RTMG 210-278] Implementing memory 'conv_w2_inputMap_V_RAM_AUTO_1R1W' using auto RAMs.
INFO: [RTMG 210-278] Implementing memory 'conv_w2_bias_V_RAM_AUTO_1R1W' using auto RAMs.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 8.61 seconds. CPU system time: 0.04 seconds. Elapsed time: 8.72 seconds; current allocated memory: 566.629 MB.
INFO: [HLS 200-111] Finished Generating all RTL models: CPU user time: 5.96 seconds. CPU system time: 0.03 seconds. Elapsed time: 6.04 seconds; current allocated memory: 579.973 MB.
INFO: [HLS 200-111] Finished Updating report files: CPU user time: 0.75 seconds. CPU system time: 0.02 seconds. Elapsed time: 0.77 seconds; current allocated memory: 608.285 MB.
INFO: [VHDL 208-304] Generating VHDL RTL for conv_w2.
INFO: [VLOG 209-307]==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
INFO: [SYN 201-201] Setting up clock 'default' with a period of 10ns.
INFO: [SYN 201-201] Setting up clock 'default' with an uncertainty of 0ns.
INFO: [HLS 200-1611] Setting target device to 'xczu7ev-ffvc1156-2-e'
INFO: [HLS 200-1505] Using flow_target 'vivado'
INFO: [HLS 200-1464] Running solution command: config_export -display_name=mixed_conv_w2
INFO: [HLS 200-1464] Running solution command: config_export -output=/home/pferreira/HwSw/Vivado/IPs
INFO: [HLS 200-1464] Running solution command: config_export -version=1.1
INFO: [HLS 200-1464] Running solution command: config_export -format=ip_catalog
INFO: [HLS 200-1464] Running solution command: config_export -rtl=verilog
INFO: [HLS 200-1510] Running: set_part xczu7ev-ffvc1156-2-e 
INFO: [HLS 200-1510] Running: create_clock -period 10 -name default 
INFO: [HLS 200-1510] Running: config_export -display_name mixed_conv_w2 -format ip_catalog -output /home/pferreira/HwSw/Vivado/IPs -rtl verilog -version 1.1 
INFO: [HLS 200-1510] Running: set_clock_uncertainty 0 
INFO: [HLS 200-1510] Running: source ./mixed_conv_w2a8/solution1/directives.tcl
INFO: [HLS 200-1510] Running: set_directive_top -name conv_w2 conv_w2 
INFO: [HLS 200-1510] Running: csynth_design 
INFO: [HLS 200-111] Finished File checks and directory preparation: CPU user time: 0.01 seconds. CPU system time: 0 seconds. Elapsed time: 10.02 seconds; current allocated memory: 224.031 MB.
INFO: [HLS 200-10] Analyzing design file 'sources/mixed_conv_w2/mixed_conv.cpp' ... 
INFO: [HLS 200-111] Finished Source Code Analysis and Preprocessing: CPU user time: 2.97 seconds. CPU system time: 0.31 seconds. Elapsed time: 3.38 seconds; current allocated memory: 225.125 MB.
INFO: [HLS 200-777] Using interface defaults for 'Vivado' flow target.
INFO: [HLS 214-131] Inlining function 'read_stream_weights(ap_int<32>*, unsigned int*, int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_weights(ap_int<32> (*) [288], unsigned int, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:204:2)
INFO: [HLS 214-131] Inlining function 'save_padding_pixel(ap_int<128>*, unsigned int)' into 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:99:4)
INFO: [HLS 214-131] Inlining function 'read_stream_activations(ap_int<128>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:101:4)
INFO: [HLS 214-131] Inlining function 'save_padding_pixel(ap_int<128>*, unsigned int)' into 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:136:3)
INFO: [HLS 214-131] Inlining function 'read_stream_activations(ap_int<128>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:138:3)
INFO: [HLS 214-131] Inlining function 'PE(ap_int<128>, ap_int<32>, ap_int<32>*, bool)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:480:10)
INFO: [HLS 214-131] Inlining function 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:436:9)
INFO: [HLS 214-291] Loop 'WeightBusSeparationLOOP' is marked as complete unroll implied by the pipeline pragma (sources/mixed_conv_w2/mixed_conv.cpp:164:2)
INFO: [HLS 214-186] Unrolling loop 'AccumResetLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:448:9) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-186] Unrolling loop 'PECallLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:462:8) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-186] Unrolling loop 'PEOperationLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:18:2) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-186] Unrolling loop 'WeightBusSeparationLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:164:2) in function 'read_weights' completely with a factor of 4 (sources/mixed_conv_w2/mixed_conv.cpp:184:0)
INFO: [HLS 214-178] Inlining function 'read_bias(ap_int<8>*, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-178] Inlining function 'read_weights(ap_int<32> (*) [288], unsigned int, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-178] Inlining function 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-248] Applying array_partition to 'filter': Complete partitioning on dimension 1. Cyclic partitioning with factor 4 on dimension 2. (sources/mixed_conv_w2/mixed_conv.cpp:285:15)
INFO: [HLS 214-248] Applying array_partition to 'inputMapLineAddr': Complete partitioning on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:287:6)
INFO: [HLS 214-248] Applying array_partition to 'bias': Cyclic partitioning with factor 16 on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:288:9)
INFO: [HLS 214-248] Applying array_partition to 'accum': Complete partitioning on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:289:10)
INFO: [HLS 200-111] Finished Compiling Optimization and Transform: CPU user time: 5.82 seconds. CPU system time: 0.25 seconds. Elapsed time: 6.09 seconds; current allocated memory: 226.320 MB.
INFO: [HLS 200-111] Finished Checking Pragmas: CPU user time: 0 seconds. CPU system time: 0 seconds. Elapsed time: 0 seconds; current allocated memory: 226.320 MB.
INFO: [HLS 200-10] Starting code transformations ...
INFO: [HLS 200-111] Finished Standard Transforms: CPU user time: 1.79 seconds. CPU system time: 0.02 seconds. Elapsed time: 1.8 seconds; current allocated memory: 261.949 MB.
INFO: [HLS 200-10] Checking synthesizability ...
WARNING: [SYNCHK 200-23] /home/mpv/tools/Xilinx/Vitis_HLS/2022.2/common/technology/autopilot/ap_int_ref.h:628: variable-indexed range selection may cause suboptimal QoR.
INFO: [SYNCHK 200-10] 0 error(s), 1 warning(s).
INFO: [HLS 200-111] Finished Checking Synthesizability: CPU user time: 1.88 seconds. CPU system time: 0 seconds. Elapsed time: 1.88 seconds; current allocated memory: 272.211 MB.
INFO: [XFORM 203-510] Pipelining loop 'ChannelLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289) in function 'conv_w2' automatically.
INFO: [XFORM 203-502] Unrolling all sub-loops inside loop 'ChannelLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289) in function 'conv_w2' for pipelining.
INFO: [HLS 200-489] Unrolling loop 'AccumAdjustmentLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289) in function 'conv_w2' completely with a factor of 16.
INFO: [HLS 200-489] Unrolling loop 'OutputStreamPackLOOP' in function 'conv_w2' completely with a factor of 16.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:174:12) to (sources/mixed_conv_w2/mixed_conv.cpp:195:2) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:103:11) to (sources/mixed_conv_w2/mixed_conv.cpp:95:2) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:395:56) to (sources/mixed_conv_w2/mixed_conv.cpp:435:11) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:372:7) to (sources/mixed_conv_w2/mixed_conv.cpp:488:11) in function 'conv_w2'... converting 610 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:140:8) to (sources/mixed_conv_w2/mixed_conv.cpp:443:8) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:495:21) in function 'conv_w2'... converting 33 basic blocks.
INFO: [XFORM 203-11] Balancing expressions in function 'conv_w2' (sources/mixed_conv_w2/mixed_conv.cpp:61:8)...518 expression(s) balanced.
INFO: [HLS 200-111] Finished Loop, function and other optimizations: CPU user time: 3.82 seconds. CPU system time: 0.02 seconds. Elapsed time: 3.85 seconds; current allocated memory: 346.332 MB.
INFO: [XFORM 203-541] Flattening a loop nest 'ReadBiasStreamsLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:233:14) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'KernelXLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'KernelYLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'FilterLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'OutXLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'OutYLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [HLS 200-472] Inferring partial write operation for 'bias.V' (sources/mixed_conv_w2/mixed_conv.cpp:247:24)
INFO: [HLS 200-472] Inferring partial write operation for 'filter.V.1' (sources/mixed_conv_w2/mixed_conv.cpp:171:27)
INFO: [HLS 200-472] Inferring partial write operation for 'inputMap.V' (sources/mixed_conv_w2/mixed_conv.cpp:61:21)
INFO: [HLS 200-472] Inferring partial write operation for 'inputMap.V' (sources/mixed_conv_w2/mixed_conv.cpp:71:21)
INFO: [HLS 200-111] Finished Architecture Synthesis: CPU user time: 0.98 seconds. CPU system time: 0.01 seconds. Elapsed time: 1 seconds; current allocated memory: 386.832 MB.
INFO: [HLS 200-10] Starting hardware synthesis ...
INFO: [HLS 200-10] Synthesizing 'conv_w2' ...
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_VITIS_LOOP_331_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'VITIS_LOOP_331_1'.
INFO: [HLS 200-1470] Pipelining result : Target II = 1, Final II = 1, Depth = 1, loop 'VITIS_LOOP_331_1'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.06 seconds. CPU system time: 0.02 seconds. Elapsed time: 0.09 seconds; current allocated memory: 387.641 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.02 seconds. CPU system time: 0 seconds. Elapsed time: 0.01 seconds; current allocated memory: 387.641 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_241_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadBiasStreamsLOOP_VITIS_LOOP_241_1'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 3, loop 'ReadBiasStreamsLOOP_VITIS_LOOP_241_1'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.06 seconds. CPU system time: 0 seconds. Elapsed time: 0.08 seconds; current allocated memory: 389.148 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.04 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.05 seconds; current allocated memory: 389.148 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadWeightStreamsLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 2, loop 'ReadWeightStreamsLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.57 seconds. CPU system time: 0 seconds. Elapsed time: 0.57 seconds; current allocated memory: 398.219 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.13 seconds. CPU system time: 0 seconds. Elapsed time: 0.14 seconds; current allocated memory: 398.219 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadActivationsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadActivationsLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 2, loop 'ReadActivationsLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.19 seconds. CPU system time: 0 seconds. Elapsed time: 0.19 seconds; current allocated memory: 398.219 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.04 seconds. CPU system time: 0 seconds. Elapsed time: 0.07 seconds; current allocated memory: 398.219 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_509) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_511) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_508) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_506) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_504) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_502) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_500) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_498) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_496) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_493) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_495) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_492) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_490) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_488) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_486) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_484) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_482) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_480) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_477) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_479) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_476) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_474) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_472) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_470) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_468) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_466) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_464) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_461) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_463) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_460) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_458) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_456) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_454) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_452) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_450) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_448) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_445) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_447) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_444) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_442) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_440) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_438) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_436) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_434) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_432) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_429) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_431) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_428) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_426) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_424) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_422) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_420) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_418) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_416) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_413) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_415) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_412) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_410) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_408) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_406) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_404) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_402) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_400) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_397) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_399) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_396) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_394) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_392) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_390) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_388) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_386) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_384) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_381) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_383) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_380) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_378) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_376) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_374) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_372) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_370) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_368) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_365) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_367) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_364) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_362) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_360) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_358) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_356) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_354) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_352) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_349) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_351) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_348) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_346) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_344) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_342) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_340) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_338) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_336) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_333) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_335) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_332) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_330) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_328) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_326) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_324) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_322) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_320) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_317) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_319) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_316) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_314) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_312) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_310) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_308) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_306) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_304) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_301) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_303) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_300) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_298) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_296) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_294) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_292) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_290) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_288) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_285) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_287) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_284) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_282) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_280) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_278) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_276) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_274) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_272) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_269) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_271) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_268) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_266) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_264) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_262) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_260) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_258) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_256) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_253) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_255) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_252) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_250) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_248) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_246) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_244) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_242) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_240) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_237) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_239) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_236) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_234) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_232) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_230) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_228) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_226) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_224) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_221) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_223) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_220) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_218) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_216) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_214) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_212) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_210) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_208) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_205) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_207) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_204) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_202) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_200) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_198) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_196) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_194) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_192) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_189) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_191) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_188) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_186) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_184) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_182) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_180) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_178) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_176) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_173) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_175) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_172) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_170) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_168) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_166) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_164) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_162) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_160) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_157) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_159) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_156) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_154) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_152) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_150) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_148) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_146) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_144) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_141) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_143) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_140) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_138) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_136) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_134) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_132) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_130) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_128) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_125) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_127) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_124) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_122) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_120) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_118) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_116) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_114) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_112) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_109) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_111) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_108) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_106) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_104) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_102) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_100) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_98) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_96) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_93) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_95) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_92) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_90) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_88) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_86) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_84) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_82) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_80) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_77) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_79) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_76) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_74) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_72) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_70) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_68) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_66) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_64) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_62) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_63) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_60) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_58) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_56) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_54) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_52) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_50) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_48) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_45) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_47) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_44) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_42) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_40) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_38) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_36) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_34) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_32) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_30) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_31) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_28) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_26) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_24) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_22) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_20) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_18) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_16) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_13) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_15) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_12) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_10) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_8) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_6) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_4) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_2) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V) to 3 in order to utilize available DSP registers.
INFO: [SCHED 204-61] Pipelining loop 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 8, loop 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 3.62 seconds. CPU system time: 0.04 seconds. Elapsed time: 4.34 seconds; current allocated memory: 458.004 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 2.01 seconds. CPU system time: 0.01 seconds. Elapsed time: 2.03 seconds; current allocated memory: 458.004 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [HLS 200-486] Changing DSP latency (root=streamsPerFilter) to 3 in order to utilize available DSP registers.
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 3 seconds. CPU system time: 0.01 seconds. Elapsed time: 3.02 seconds; current allocated memory: 458.004 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 1.01 seconds. CPU system time: 0.01 seconds. Elapsed time: 1.02 seconds; current allocated memory: 458.004 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_VITIS_LOOP_331_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [RTGEN 206-100] Generating core module 'mul_2ns_32s_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_VITIS_LOOP_331_1'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 2.5 seconds. CPU system time: 0 seconds. Elapsed time: 2.51 seconds; current allocated memory: 458.004 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_241_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_241_1' pipeline 'ReadBiasStreamsLOOP_VITIS_LOOP_241_1' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_241_1'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.06 seconds. CPU system time: 0 seconds. Elapsed time: 0.05 seconds; current allocated memory: 458.004 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' pipeline 'ReadWeightStreamsLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadWeightStreamsLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.3 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.39 seconds; current allocated memory: 458.004 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadActivationsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadActivationsLOOP' pipeline 'ReadActivationsLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Generating core module 'mux_42_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadActivationsLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.42 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.56 seconds; current allocated memory: 458.004 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' pipeline 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_10s_11_4_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_11s_12_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_32s_32_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_11s_12_4_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_12s_12_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_32s_32_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_3ns_13_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_13ns_3ns_16_1_1': 3 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_16ns_30s_32_1_1': 4 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32s_2ns_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_30s_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3s_2ns_3_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_8ns_2s_10_1_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_9s_2s_11_1_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mux_42_32_1_1': 18 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.83 seconds. CPU system time: 0.02 seconds. Elapsed time: 0.86 seconds; current allocated memory: 493.543 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2' 
INFO: [HLS 200-10] ----------------------------------------------------------------
WARNING: [RTGEN 206-101] Design contains AXI ports. Reset is fixed to synchronous and active low.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_data_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_keep_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_strb_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_last_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_data_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_keep_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_strb_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_last_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/numFilters' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/numKernels' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/inputMapSizeX' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/inputMapSizeY' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/ctrl' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on function 'conv_w2' to 's_axilite & ap_ctrl_hs'.
INFO: [RTGEN 206-100] Bundling port 'numFilters', 'numKernels', 'inputMapSizeX', 'inputMapSizeY', 'ctrl' and 'return' to AXI-Lite port BUS1.
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_34ns_44_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_44ns_54_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_54ns_64_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_30s_32s_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_30s_3ns_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32ns_2ns_34_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32s_32s_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_28ns_31_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_31ns_34_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_3ns_6_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_mul_6ns_28s_32_4_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'sdiv_33ns_3ns_10_37_seq_1': 2 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2'.
INFO: [RTMG 210-278] Implementing memory 'conv_w2_filter_V_RAM_AUTO_1R1W' using auto RAMs.
INFO: [RTMG 210-278] Implementing memory 'conv_w2_inputMap_V_RAM_AUTO_1R1W' using auto RAMs.
INFO: [RTMG 210-278] Implementing memory 'conv_w2_bias_V_RAM_AUTO_1R1W' using auto RAMs.
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
INFO: [SYN 201-201] Setting up clock 'default' with a period of 10ns.
INFO: [SYN 201-201] Setting up clock 'default' with an uncertainty of 0ns.
INFO: [HLS 200-1611] Setting target device to 'xczu7ev-ffvc1156-2-e'
INFO: [HLS 200-1505] Using flow_target 'vivado'
INFO: [HLS 200-1464] Running solution command: config_export -display_name=mixed_conv_w2
INFO: [HLS 200-1464] Running solution command: config_export -format=ip_catalog
INFO: [HLS 200-1464] Running solution command: config_export -output=/home/pferreira/HwSw/Vivado/IPs
INFO: [HLS 200-1464] Running solution command: config_export -rtl=verilog
INFO: [HLS 200-1464] Running solution command: config_export -version=1.2
INFO: [HLS 200-1510] Running: set_part xczu7ev-ffvc1156-2-e 
INFO: [HLS 200-1510] Running: create_clock -period 10 -name default 
INFO: [HLS 200-1510] Running: config_export -display_name mixed_conv_w2 -format ip_catalog -output /home/pferreira/HwSw/Vivado/IPs -rtl verilog -version 1.2 
INFO: [HLS 200-1510] Running: set_clock_uncertainty 0 
INFO: [HLS 200-1510] Running: source ./mixed_conv_w2a8/solution1/directives.tcl
INFO: [HLS 200-1510] Running: set_directive_top -name conv_w2 conv_w2 
INFO: [HLS 200-1510] Running: csynth_design 
INFO: [HLS 200-111] Finished File checks and directory preparation: CPU user time: 0.03 seconds. CPU system time: 0.01 seconds. Elapsed time: 10.19 seconds; current allocated memory: 223.656 MB.
INFO: [HLS 200-10] Analyzing design file 'sources/mixed_conv_w2/mixed_conv.cpp' ... 
INFO: [HLS 200-111] Finished Source Code Analysis and Preprocessing: CPU user time: 3.21 seconds. CPU system time: 0.41 seconds. Elapsed time: 14.1 seconds; current allocated memory: 225.086 MB.
INFO: [HLS 200-777] Using interface defaults for 'Vivado' flow target.
INFO: [HLS 214-131] Inlining function 'read_stream_weights(ap_int<32>*, unsigned int*, int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_weights(ap_int<32> (*) [288], unsigned int, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:204:2)
INFO: [HLS 214-131] Inlining function 'save_padding_pixel(ap_int<128>*, unsigned int)' into 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:99:4)
INFO: [HLS 214-131] Inlining function 'read_stream_activations(ap_int<128>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:101:4)
INFO: [HLS 214-131] Inlining function 'save_padding_pixel(ap_int<128>*, unsigned int)' into 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:136:3)
INFO: [HLS 214-131] Inlining function 'read_stream_activations(ap_int<128>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:138:3)
INFO: [HLS 214-131] Inlining function 'PE(ap_int<128>, ap_int<32>, ap_int<32>*, bool)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:480:10)
INFO: [HLS 214-131] Inlining function 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:436:9)
INFO: [HLS 214-291] Loop 'WeightBusSeparationLOOP' is marked as complete unroll implied by the pipeline pragma (sources/mixed_conv_w2/mixed_conv.cpp:164:2)
INFO: [HLS 214-186] Unrolling loop 'AccumResetLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:448:9) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-186] Unrolling loop 'PECallLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:462:8) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-186] Unrolling loop 'PEOperationLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:18:2) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-186] Unrolling loop 'WeightBusSeparationLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:164:2) in function 'read_weights' completely with a factor of 4 (sources/mixed_conv_w2/mixed_conv.cpp:184:0)
INFO: [HLS 214-178] Inlining function 'read_bias(ap_int<8>*, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-178] Inlining function 'read_weights(ap_int<32> (*) [288], unsigned int, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-178] Inlining function 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-248] Applying array_partition to 'filter': Complete partitioning on dimension 1. Cyclic partitioning with factor 4 on dimension 2. (sources/mixed_conv_w2/mixed_conv.cpp:285:15)
INFO: [HLS 214-248] Applying array_partition to 'inputMapLineAddr': Complete partitioning on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:287:6)
INFO: [HLS 214-248] Applying array_partition to 'bias': Cyclic partitioning with factor 16 on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:288:9)
INFO: [HLS 214-248] Applying array_partition to 'accum': Complete partitioning on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:289:10)
INFO: [HLS 200-111] Finished Compiling Optimization and Transform: CPU user time: 6.73 seconds. CPU system time: 0.44 seconds. Elapsed time: 16.09 seconds; current allocated memory: 226.270 MB.
INFO: [HLS 200-111] Finished Checking Pragmas: CPU user time: 0 seconds. CPU system time: 0 seconds. Elapsed time: 0 seconds; current allocated memory: 226.270 MB.
INFO: [HLS 200-10] Starting code transformations ...
INFO: [HLS 200-111] Finished Standard Transforms: CPU user time: 1.85 seconds. CPU system time: 0.02 seconds. Elapsed time: 2.98 seconds; current allocated memory: 261.992 MB.
INFO: [HLS 200-10] Checking synthesizability ...
WARNING: [SYNCHK 200-23] /home/mpv/tools/Xilinx/Vitis_HLS/2022.2/common/technology/autopilot/ap_int_ref.h:628: variable-indexed range selection may cause suboptimal QoR.
INFO: [SYNCHK 200-10] 0 error(s), 1 warning(s).
INFO: [HLS 200-111] Finished Checking Synthesizability: CPU user time: 1.95 seconds. CPU system time: 0.01 seconds. Elapsed time: 2.08 seconds; current allocated memory: 272.164 MB.
INFO: [XFORM 203-510] Pipelining loop 'ChannelLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289) in function 'conv_w2' automatically.
INFO: [XFORM 203-502] Unrolling all sub-loops inside loop 'ChannelLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289) in function 'conv_w2' for pipelining.
INFO: [HLS 200-489] Unrolling loop 'AccumAdjustmentLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289) in function 'conv_w2' completely with a factor of 16.
INFO: [HLS 200-489] Unrolling loop 'OutputStreamPackLOOP' in function 'conv_w2' completely with a factor of 16.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:174:12) to (sources/mixed_conv_w2/mixed_conv.cpp:195:2) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:103:11) to (sources/mixed_conv_w2/mixed_conv.cpp:95:2) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:395:56) to (sources/mixed_conv_w2/mixed_conv.cpp:435:11) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:372:7) to (sources/mixed_conv_w2/mixed_conv.cpp:488:11) in function 'conv_w2'... converting 610 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:140:8) to (sources/mixed_conv_w2/mixed_conv.cpp:443:8) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:495:21) in function 'conv_w2'... converting 33 basic blocks.
INFO: [XFORM 203-11] Balancing expressions in function 'conv_w2' (sources/mixed_conv_w2/mixed_conv.cpp:61:8)...518 expression(s) balanced.
INFO: [HLS 200-111] Finished Loop, function and other optimizations: CPU user time: 4 seconds. CPU system time: 0 seconds. Elapsed time: 4.24 seconds; current allocated memory: 346.293 MB.
INFO: [XFORM 203-541] Flattening a loop nest 'ReadBiasStreamsLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:233:14) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'KernelXLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'KernelYLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'FilterLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'OutXLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'OutYLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [HLS 200-472] Inferring partial write operation for 'bias.V' (sources/mixed_conv_w2/mixed_conv.cpp:247:24)
INFO: [HLS 200-472] Inferring partial write operation for 'filter.V.1' (sources/mixed_conv_w2/mixed_conv.cpp:171:27)
INFO: [HLS 200-472] Inferring partial write operation for 'inputMap.V' (sources/mixed_conv_w2/mixed_conv.cpp:61:21)
INFO: [HLS 200-472] Inferring partial write operation for 'inputMap.V' (sources/mixed_conv_w2/mixed_conv.cpp:71:21)
INFO: [HLS 200-111] Finished Architecture Synthesis: CPU user time: 1.01 seconds. CPU system time: 0.01 seconds. Elapsed time: 1.14 seconds; current allocated memory: 385.793 MB.
INFO: [HLS 200-10] Starting hardware synthesis ...
INFO: [HLS 200-10] Synthesizing 'conv_w2' ...
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_VITIS_LOOP_331_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'VITIS_LOOP_331_1'.
INFO: [HLS 200-1470] Pipelining result : Target II = 1, Final II = 1, Depth = 1, loop 'VITIS_LOOP_331_1'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.07 seconds. CPU system time: 0.02 seconds. Elapsed time: 0.77 seconds; current allocated memory: 387.551 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.02 seconds. CPU system time: 0 seconds. Elapsed time: 0.06 seconds; current allocated memory: 387.551 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_241_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadBiasStreamsLOOP_VITIS_LOOP_241_1'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 3, loop 'ReadBiasStreamsLOOP_VITIS_LOOP_241_1'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.09 seconds. CPU system time: 0 seconds. Elapsed time: 0.08 seconds; current allocated memory: 389.117 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.04 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.04 seconds; current allocated memory: 389.117 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadWeightStreamsLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 2, loop 'ReadWeightStreamsLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.58 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.59 seconds; current allocated memory: 398.180 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.14 seconds. CPU system time: 0 seconds. Elapsed time: 0.14 seconds; current allocated memory: 398.180 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadActivationsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadActivationsLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 2, loop 'ReadActivationsLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.18 seconds. CPU system time: 0 seconds. Elapsed time: 0.19 seconds; current allocated memory: 398.180 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.04 seconds. CPU system time: 0 seconds. Elapsed time: 0.04 seconds; current allocated memory: 398.180 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_509) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_511) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_508) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_506) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_504) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_502) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_500) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_498) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_496) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_493) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_495) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_492) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_490) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_488) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_486) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_484) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_482) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_480) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_477) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_479) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_476) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_474) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_472) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_470) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_468) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_466) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_464) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_461) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_463) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_460) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_458) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_456) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_454) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_452) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_450) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_448) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_445) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_447) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_444) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_442) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_440) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_438) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_436) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_434) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_432) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_429) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_431) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_428) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_426) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_424) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_422) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_420) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_418) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_416) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_413) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_415) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_412) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_410) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_408) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_406) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_404) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_402) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_400) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_397) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_399) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_396) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_394) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_392) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_390) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_388) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_386) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_384) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_381) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_383) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_380) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_378) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_376) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_374) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_372) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_370) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_368) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_365) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_367) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_364) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_362) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_360) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_358) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_356) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_354) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_352) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_349) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_351) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_348) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_346) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_344) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_342) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_340) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_338) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_336) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_333) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_335) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_332) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_330) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_328) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_326) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_324) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_322) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_320) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_317) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_319) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_316) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_314) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_312) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_310) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_308) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_306) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_304) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_301) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_303) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_300) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_298) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_296) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_294) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_292) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_290) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_288) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_285) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_287) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_284) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_282) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_280) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_278) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_276) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_274) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_272) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_269) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_271) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_268) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_266) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_264) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_262) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_260) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_258) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_256) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_253) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_255) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_252) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_250) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_248) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_246) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_244) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_242) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_240) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_237) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_239) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_236) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_234) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_232) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_230) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_228) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_226) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_224) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_221) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_223) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_220) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_218) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_216) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_214) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_212) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_210) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_208) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_205) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_207) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_204) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_202) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_200) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_198) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_196) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_194) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_192) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_189) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_191) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_188) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_186) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_184) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_182) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_180) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_178) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_176) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_173) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_175) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_172) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_170) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_168) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_166) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_164) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_162) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_160) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_157) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_159) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_156) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_154) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_152) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_150) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_148) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_146) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_144) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_141) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_143) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_140) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_138) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_136) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_134) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_132) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_130) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_128) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_125) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_127) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_124) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_122) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_120) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_118) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_116) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_114) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_112) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_109) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_111) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_108) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_106) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_104) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_102) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_100) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_98) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_96) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_93) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_95) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_92) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_90) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_88) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_86) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_84) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_82) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_80) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_77) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_79) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_76) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_74) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_72) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_70) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_68) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_66) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_64) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_62) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_63) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_60) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_58) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_56) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_54) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_52) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_50) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_48) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_45) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_47) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_44) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_42) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_40) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_38) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_36) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_34) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_32) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_30) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_31) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_28) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_26) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_24) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_22) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_20) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_18) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_16) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_13) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_15) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_12) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_10) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_8) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_6) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_4) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_2) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V) to 3 in order to utilize available DSP registers.
INFO: [SCHED 204-61] Pipelining loop 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 8, loop 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 3.61 seconds. CPU system time: 0.04 seconds. Elapsed time: 3.96 seconds; current allocated memory: 457.977 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 2.1 seconds. CPU system time: 0.02 seconds. Elapsed time: 2.11 seconds; current allocated memory: 457.977 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [HLS 200-486] Changing DSP latency (root=streamsPerFilter) to 3 in order to utilize available DSP registers.
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 3.08 seconds. CPU system time: 0.04 seconds. Elapsed time: 3.15 seconds; current allocated memory: 457.977 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 1.05 seconds. CPU system time: 0 seconds. Elapsed time: 1.05 seconds; current allocated memory: 457.977 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_VITIS_LOOP_331_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [RTGEN 206-100] Generating core module 'mul_2ns_32s_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_VITIS_LOOP_331_1'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 2.52 seconds. CPU system time: 0 seconds. Elapsed time: 2.68 seconds; current allocated memory: 457.977 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_241_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_241_1' pipeline 'ReadBiasStreamsLOOP_VITIS_LOOP_241_1' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_241_1'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.08 seconds. CPU system time: 0 seconds. Elapsed time: 0.09 seconds; current allocated memory: 457.977 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' pipeline 'ReadWeightStreamsLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadWeightStreamsLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.29 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.29 seconds; current allocated memory: 457.977 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadActivationsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadActivationsLOOP' pipeline 'ReadActivationsLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Generating core module 'mux_42_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadActivationsLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.42 seconds. CPU system time: 0.02 seconds. Elapsed time: 0.44 seconds; current allocated memory: 457.977 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' pipeline 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_10s_11_4_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_11s_12_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_32s_32_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_11s_12_4_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_12s_12_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_32s_32_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_3ns_13_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_13ns_3ns_16_1_1': 3 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_16ns_30s_32_1_1': 4 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32s_2ns_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_30s_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3s_2ns_3_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_8ns_2s_10_1_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_9s_2s_11_1_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mux_42_32_1_1': 18 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.88 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.94 seconds; current allocated memory: 493.551 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2' 
INFO: [HLS 200-10] ----------------------------------------------------------------
WARNING: [RTGEN 206-101] Design contains AXI ports. Reset is fixed to synchronous and active low.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_data_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_keep_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_strb_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_last_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_data_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_keep_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_strb_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_last_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/numFilters' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/numKernels' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/inputMapSizeX' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/inputMapSizeY' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/ctrl' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on function 'conv_w2' to 's_axilite & ap_ctrl_hs'.
INFO: [RTGEN 206-100] Bundling port 'numFilters', 'numKernels', 'inputMapSizeX', 'inputMapSizeY', 'ctrl' and 'return' to AXI-Lite port BUS1.
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_34ns_44_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_44ns_54_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_54ns_64_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_30s_32s_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_30s_3ns_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32ns_2ns_34_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32s_32s_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_28ns_31_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_31ns_34_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_3ns_6_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_mul_6ns_28s_32_4_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'sdiv_33ns_3ns_10_37_seq_1': 2 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2'.
INFO: [RTMG 210-278] Implementing memory 'conv_w2_filter_V_RAM_AUTO_1R1W' using auto RAMs.
INFO: [RTMG 210-278] Implementing memory 'conv_w2_inputMap_V_RAM_AUTO_1R1W' using auto RAMs.
INFO: [RTMG 210-278] Implementing memory 'conv_w2_bias_V_RAM_AUTO_1R1W' using auto RAMs.
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
INFO: [SYN 201-201] Setting up clock 'default' with a period of 10ns.
INFO: [SYN 201-201] Setting up clock 'default' with an uncertainty of 0ns.
INFO: [HLS 200-1611] Setting target device to 'xczu7ev-ffvc1156-2-e'
INFO: [HLS 200-1505] Using flow_target 'vivado'
INFO: [HLS 200-1464] Running solution command: config_export -display_name=mixed_conv_w2
INFO: [HLS 200-1464] Running solution command: config_export -format=ip_catalog
INFO: [HLS 200-1464] Running solution command: config_export -output=/home/pferreira/HwSw/Vivado/IPs
INFO: [HLS 200-1464] Running solution command: config_export -rtl=verilog
INFO: [HLS 200-1464] Running solution command: config_export -version=1.3
INFO: [HLS 200-1510] Running: set_part xczu7ev-ffvc1156-2-e 
INFO: [HLS 200-1510] Running: create_clock -period 10 -name default 
INFO: [HLS 200-1510] Running: config_export -display_name mixed_conv_w2 -format ip_catalog -output /home/pferreira/HwSw/Vivado/IPs -rtl verilog -version 1.3 
INFO: [HLS 200-1510] Running: set_clock_uncertainty 0 
INFO: [HLS 200-1510] Running: source ./mixed_conv_w2a8/solution1/directives.tcl
INFO: [HLS 200-1510] Running: set_directive_top -name conv_w2 conv_w2 
INFO: [HLS 200-1510] Running: csynth_design 
INFO: [HLS 200-111] Finished File checks and directory preparation: CPU user time: 0.03 seconds. CPU system time: 0 seconds. Elapsed time: 10.05 seconds; current allocated memory: 223.645 MB.
INFO: [HLS 200-10] Analyzing design file 'sources/mixed_conv_w2/mixed_conv.cpp' ... 
WARNING: [HLS 207-5292] unused parameter 'numFilters' (sources/mixed_conv_w2/mixed_conv.cpp:230:20)
INFO: [HLS 200-111] Finished Source Code Analysis and Preprocessing: CPU user time: 3.01 seconds. CPU system time: 0.2 seconds. Elapsed time: 3.24 seconds; current allocated memory: 225.082 MB.
INFO: [HLS 200-777] Using interface defaults for 'Vivado' flow target.
INFO: [HLS 214-131] Inlining function 'read_stream_weights(ap_int<32>*, unsigned int*, int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_weights(ap_int<32> (*) [288], unsigned int, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:204:2)
INFO: [HLS 214-131] Inlining function 'save_padding_pixel(ap_int<128>*, unsigned int)' into 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:99:4)
INFO: [HLS 214-131] Inlining function 'read_stream_activations(ap_int<128>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:101:4)
INFO: [HLS 214-131] Inlining function 'save_padding_pixel(ap_int<128>*, unsigned int)' into 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:136:3)
INFO: [HLS 214-131] Inlining function 'read_stream_activations(ap_int<128>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:138:3)
INFO: [HLS 214-131] Inlining function 'PE(ap_int<128>, ap_int<32>, ap_int<32>*, bool)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:480:10)
INFO: [HLS 214-131] Inlining function 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:436:9)
INFO: [HLS 214-291] Loop 'WeightBusSeparationLOOP' is marked as complete unroll implied by the pipeline pragma (sources/mixed_conv_w2/mixed_conv.cpp:164:2)
INFO: [HLS 214-186] Unrolling loop 'AccumResetLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:448:9) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-186] Unrolling loop 'PECallLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:462:8) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-186] Unrolling loop 'PEOperationLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:18:2) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-186] Unrolling loop 'WeightBusSeparationLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:164:2) in function 'read_weights' completely with a factor of 4 (sources/mixed_conv_w2/mixed_conv.cpp:184:0)
INFO: [HLS 214-178] Inlining function 'read_bias(ap_int<8>*, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-178] Inlining function 'read_weights(ap_int<32> (*) [288], unsigned int, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-178] Inlining function 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:263:0)
INFO: [HLS 214-248] Applying array_partition to 'filter': Complete partitioning on dimension 1. Cyclic partitioning with factor 4 on dimension 2. (sources/mixed_conv_w2/mixed_conv.cpp:285:15)
INFO: [HLS 214-248] Applying array_partition to 'inputMapLineAddr': Complete partitioning on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:287:6)
INFO: [HLS 214-248] Applying array_partition to 'bias': Cyclic partitioning with factor 16 on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:288:9)
INFO: [HLS 214-248] Applying array_partition to 'accum': Complete partitioning on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:289:10)
INFO: [HLS 200-111] Finished Compiling Optimization and Transform: CPU user time: 5.94 seconds. CPU system time: 0.18 seconds. Elapsed time: 6.14 seconds; current allocated memory: 226.273 MB.
INFO: [HLS 200-111] Finished Checking Pragmas: CPU user time: 0 seconds. CPU system time: 0 seconds. Elapsed time: 0 seconds; current allocated memory: 226.273 MB.
INFO: [HLS 200-10] Starting code transformations ...
INFO: [HLS 200-111] Finished Standard Transforms: CPU user time: 1.85 seconds. CPU system time: 0.01 seconds. Elapsed time: 1.85 seconds; current allocated memory: 262.012 MB.
INFO: [HLS 200-10] Checking synthesizability ...
WARNING: [SYNCHK 200-23] /home/mpv/tools/Xilinx/Vitis_HLS/2022.2/common/technology/autopilot/ap_int_ref.h:628: variable-indexed range selection may cause suboptimal QoR.
INFO: [SYNCHK 200-10] 0 error(s), 1 warning(s).
INFO: [HLS 200-111] Finished Checking Synthesizability: CPU user time: 2.01 seconds. CPU system time: 0 seconds. Elapsed time: 2.02 seconds; current allocated memory: 271.699 MB.
INFO: [XFORM 203-510] Pipelining loop 'ChannelLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289) in function 'conv_w2' automatically.
INFO: [XFORM 203-502] Unrolling all sub-loops inside loop 'ChannelLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289) in function 'conv_w2' for pipelining.
INFO: [HLS 200-489] Unrolling loop 'AccumAdjustmentLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289) in function 'conv_w2' completely with a factor of 16.
INFO: [HLS 200-489] Unrolling loop 'OutputStreamPackLOOP' in function 'conv_w2' completely with a factor of 16.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:174:12) to (sources/mixed_conv_w2/mixed_conv.cpp:195:2) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:103:11) to (sources/mixed_conv_w2/mixed_conv.cpp:95:2) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:395:56) to (sources/mixed_conv_w2/mixed_conv.cpp:435:11) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:372:7) to (sources/mixed_conv_w2/mixed_conv.cpp:488:11) in function 'conv_w2'... converting 610 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:140:8) to (sources/mixed_conv_w2/mixed_conv.cpp:443:8) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:495:21) in function 'conv_w2'... converting 33 basic blocks.
INFO: [XFORM 203-11] Balancing expressions in function 'conv_w2' (sources/mixed_conv_w2/mixed_conv.cpp:61:8)...518 expression(s) balanced.
INFO: [HLS 200-111] Finished Loop, function and other optimizations: CPU user time: 4.04 seconds. CPU system time: 0.02 seconds. Elapsed time: 4.05 seconds; current allocated memory: 346.340 MB.
INFO: [XFORM 203-541] Flattening a loop nest 'ReadBiasStreamsLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:233:14) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'KernelXLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'KernelYLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'FilterLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'OutXLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'OutYLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:289:10) in function 'conv_w2'.
INFO: [HLS 200-472] Inferring partial write operation for 'bias.V' (sources/mixed_conv_w2/mixed_conv.cpp:247:24)
INFO: [HLS 200-472] Inferring partial write operation for 'filter.V.1' (sources/mixed_conv_w2/mixed_conv.cpp:171:27)
INFO: [HLS 200-472] Inferring partial write operation for 'inputMap.V' (sources/mixed_conv_w2/mixed_conv.cpp:61:21)
INFO: [HLS 200-472] Inferring partial write operation for 'inputMap.V' (sources/mixed_conv_w2/mixed_conv.cpp:71:21)
INFO: [HLS 200-111] Finished Architecture Synthesis: CPU user time: 1.03 seconds. CPU system time: 0.01 seconds. Elapsed time: 1.04 seconds; current allocated memory: 385.840 MB.
INFO: [HLS 200-10] Starting hardware synthesis ...
INFO: [HLS 200-10] Synthesizing 'conv_w2' ...
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_VITIS_LOOP_331_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'VITIS_LOOP_331_1'.
INFO: [HLS 200-1470] Pipelining result : Target II = 1, Final II = 1, Depth = 1, loop 'VITIS_LOOP_331_1'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.06 seconds. CPU system time: 0.02 seconds. Elapsed time: 0.08 seconds; current allocated memory: 387.645 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.01 seconds. CPU system time: 0 seconds. Elapsed time: 0.01 seconds; current allocated memory: 387.645 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_241_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadBiasStreamsLOOP_VITIS_LOOP_241_1'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 3, loop 'ReadBiasStreamsLOOP_VITIS_LOOP_241_1'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.08 seconds. CPU system time: 0 seconds. Elapsed time: 0.08 seconds; current allocated memory: 389.203 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.04 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.05 seconds; current allocated memory: 389.203 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadWeightStreamsLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 2, loop 'ReadWeightStreamsLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.58 seconds. CPU system time: 0 seconds. Elapsed time: 0.58 seconds; current allocated memory: 398.215 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.14 seconds. CPU system time: 0 seconds. Elapsed time: 0.13 seconds; current allocated memory: 398.215 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadActivationsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadActivationsLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 2, loop 'ReadActivationsLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.17 seconds. CPU system time: 0 seconds. Elapsed time: 0.17 seconds; current allocated memory: 398.215 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.04 seconds. CPU system time: 0 seconds. Elapsed time: 0.04 seconds; current allocated memory: 398.215 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_509) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_511) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_508) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_506) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_504) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_502) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_500) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_498) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_496) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_493) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_495) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_492) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_490) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_488) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_486) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_484) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_482) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_480) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_477) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_479) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_476) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_474) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_472) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_470) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_468) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_466) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_464) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_461) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_463) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_460) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_458) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_456) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_454) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_452) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_450) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_448) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_445) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_447) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_444) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_442) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_440) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_438) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_436) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_434) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_432) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_429) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_431) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_428) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_426) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_424) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_422) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_420) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_418) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_416) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_413) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_415) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_412) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_410) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_408) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_406) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_404) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_402) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_400) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_397) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_399) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_396) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_394) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_392) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_390) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_388) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_386) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_384) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_381) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_383) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_380) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_378) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_376) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_374) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_372) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_370) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_368) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_365) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_367) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_364) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_362) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_360) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_358) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_356) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_354) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_352) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_349) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_351) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_348) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_346) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_344) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_342) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_340) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_338) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_336) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_333) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_335) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_332) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_330) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_328) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_326) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_324) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_322) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_320) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_317) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_319) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_316) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_314) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_312) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_310) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_308) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_306) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_304) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_301) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_303) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_300) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_298) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_296) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_294) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_292) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_290) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_288) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_285) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_287) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_284) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_282) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_280) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_278) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_276) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_274) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_272) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_269) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_271) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_268) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_266) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_264) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_262) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_260) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_258) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_256) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_253) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_255) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_252) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_250) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_248) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_246) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_244) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_242) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_240) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_237) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_239) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_236) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_234) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_232) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_230) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_228) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_226) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_224) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_221) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_223) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_220) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_218) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_216) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_214) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_212) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_210) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_208) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_205) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_207) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_204) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_202) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_200) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_198) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_196) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_194) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_192) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_189) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_191) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_188) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_186) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_184) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_182) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_180) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_178) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_176) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_173) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_175) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_172) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_170) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_168) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_166) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_164) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_162) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_160) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_157) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_159) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_156) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_154) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_152) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_150) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_148) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_146) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_144) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_141) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_143) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_140) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_138) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_136) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_134) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_132) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_130) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_128) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_125) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_127) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_124) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_122) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_120) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_118) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_116) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_114) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_112) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_109) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_111) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_108) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_106) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_104) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_102) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_100) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_98) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_96) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_93) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_95) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_92) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_90) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_88) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_86) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_84) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_82) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_80) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_77) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_79) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_76) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_74) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_72) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_70) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_68) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_66) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_64) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_62) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_63) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_60) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_58) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_56) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_54) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_52) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_50) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_48) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_45) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_47) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_44) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_42) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_40) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_38) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_36) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_34) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_32) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_30) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_31) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_28) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_26) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_24) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_22) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_20) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_18) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_16) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_13) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_15) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_12) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_10) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_8) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_6) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_4) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_2) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V) to 3 in order to utilize available DSP registers.
INFO: [SCHED 204-61] Pipelining loop 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 8, loop 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 3.57 seconds. CPU system time: 0.04 seconds. Elapsed time: 3.62 seconds; current allocated memory: 458.004 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 2.04 seconds. CPU system time: 0.01 seconds. Elapsed time: 2.06 seconds; current allocated memory: 458.004 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [HLS 200-486] Changing DSP latency (root=streamsPerFilter) to 3 in order to utilize available DSP registers.
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 3.02 seconds. CPU system time: 0.01 seconds. Elapsed time: 3.02 seconds; current allocated memory: 458.004 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 1.02 seconds. CPU system time: 0.01 seconds. Elapsed time: 1.03 seconds; current allocated memory: 458.004 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_VITIS_LOOP_331_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [RTGEN 206-100] Generating core module 'mul_2ns_32s_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_VITIS_LOOP_331_1'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 2.54 seconds. CPU system time: 0 seconds. Elapsed time: 2.53 seconds; current allocated memory: 458.004 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_241_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_241_1' pipeline 'ReadBiasStreamsLOOP_VITIS_LOOP_241_1' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_241_1'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.05 seconds. CPU system time: 0 seconds. Elapsed time: 0.05 seconds; current allocated memory: 458.004 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' pipeline 'ReadWeightStreamsLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadWeightStreamsLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.27 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.28 seconds; current allocated memory: 458.004 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadActivationsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadActivationsLOOP' pipeline 'ReadActivationsLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Generating core module 'mux_42_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadActivationsLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.4 seconds. CPU system time: 0 seconds. Elapsed time: 0.41 seconds; current allocated memory: 458.004 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' pipeline 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_10s_11_4_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_11s_12_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_32s_32_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_11s_12_4_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_12s_12_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_32s_32_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_3ns_13_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_13ns_3ns_16_1_1': 3 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_16ns_30s_32_1_1': 4 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32s_2ns_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_30s_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3s_2ns_3_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_8ns_2s_10_1_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_9s_2s_11_1_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mux_42_32_1_1': 18 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.86 seconds. CPU system time: 0.02 seconds. Elapsed time: 0.88 seconds; current allocated memory: 493.582 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2' 
INFO: [HLS 200-10] ----------------------------------------------------------------
WARNING: [RTGEN 206-101] Design contains AXI ports. Reset is fixed to synchronous and active low.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_data_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_keep_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_strb_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_last_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_data_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_keep_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_strb_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_last_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/numFilters' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/numKernels' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/inputMapSizeX' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/inputMapSizeY' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/ctrl' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on function 'conv_w2' to 's_axilite & ap_ctrl_hs'.
INFO: [RTGEN 206-100] Bundling port 'numFilters', 'numKernels', 'inputMapSizeX', 'inputMapSizeY', 'ctrl' and 'return' to AXI-Lite port BUS1.
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_34ns_44_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_44ns_54_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_54ns_64_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_30s_32s_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_30s_3ns_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32ns_2ns_34_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32s_32s_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_28ns_31_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_31ns_34_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_3ns_6_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_mul_6ns_28s_32_4_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'sdiv_33ns_3ns_10_37_seq_1': 2 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2'.
INFO: [RTMG 210-278] Implementing memory 'conv_w2_filter_V_RAM_AUTO_1R1W' using auto RAMs.
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
INFO: [SYN 201-201] Setting up clock 'default' with a period of 10ns.
INFO: [SYN 201-201] Setting up clock 'default' with an uncertainty of 0ns.
INFO: [HLS 200-1611] Setting target device to 'xczu7ev-ffvc1156-2-e'
INFO: [HLS 200-1505] Using flow_target 'vivado'
INFO: [HLS 200-1464] Running solution command: config_export -display_name=mixed_conv_w2
INFO: [HLS 200-1464] Running solution command: config_export -format=ip_catalog
INFO: [HLS 200-1464] Running solution command: config_export -output=/home/pferreira/HwSw/Vivado/IPs
INFO: [HLS 200-1464] Running solution command: config_export -rtl=verilog
INFO: [HLS 200-1464] Running solution command: config_export -version=1.4
INFO: [HLS 200-1510] Running: set_part xczu7ev-ffvc1156-2-e 
INFO: [HLS 200-1510] Running: create_clock -period 10 -name default 
INFO: [HLS 200-1510] Running: config_export -display_name mixed_conv_w2 -format ip_catalog -output /home/pferreira/HwSw/Vivado/IPs -rtl verilog -version 1.4 
INFO: [HLS 200-1510] Running: set_clock_uncertainty 0 
INFO: [HLS 200-1510] Running: source ./mixed_conv_w2a8/solution1/directives.tcl
INFO: [HLS 200-1510] Running: set_directive_top -name conv_w2 conv_w2 
INFO: [HLS 200-1510] Running: csynth_design 
INFO: [HLS 200-111] Finished File checks and directory preparation: CPU user time: 0 seconds. CPU system time: 0 seconds. Elapsed time: 10.01 seconds; current allocated memory: 223.930 MB.
INFO: [HLS 200-10] Analyzing design file 'sources/mixed_conv_w2/mixed_conv.cpp' ... 
INFO: [HLS 200-111] Finished Source Code Analysis and Preprocessing: CPU user time: 2.92 seconds. CPU system time: 0.29 seconds. Elapsed time: 3.22 seconds; current allocated memory: 225.000 MB.
INFO: [HLS 200-777] Using interface defaults for 'Vivado' flow target.
INFO: [HLS 214-131] Inlining function 'read_stream_weights(ap_int<32>*, unsigned int*, int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_weights(ap_int<32> (*) [288], unsigned int, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:204:2)
INFO: [HLS 214-131] Inlining function 'save_padding_pixel(ap_int<128>*, unsigned int)' into 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:99:4)
INFO: [HLS 214-131] Inlining function 'read_stream_activations(ap_int<128>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:101:4)
INFO: [HLS 214-131] Inlining function 'save_padding_pixel(ap_int<128>*, unsigned int)' into 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:136:3)
INFO: [HLS 214-131] Inlining function 'read_stream_activations(ap_int<128>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:138:3)
INFO: [HLS 214-131] Inlining function 'PE(ap_int<128>, ap_int<32>, ap_int<32>*, bool)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:487:10)
INFO: [HLS 214-131] Inlining function 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:443:9)
INFO: [HLS 214-291] Loop 'WeightBusSeparationLOOP' is marked as complete unroll implied by the pipeline pragma (sources/mixed_conv_w2/mixed_conv.cpp:164:2)
INFO: [HLS 214-186] Unrolling loop 'AccumResetLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:455:9) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-186] Unrolling loop 'PECallLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:469:8) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-186] Unrolling loop 'PEOperationLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:18:2) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-186] Unrolling loop 'WeightBusSeparationLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:164:2) in function 'read_weights' completely with a factor of 4 (sources/mixed_conv_w2/mixed_conv.cpp:184:0)
INFO: [HLS 214-178] Inlining function 'read_bias(ap_int<8>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-178] Inlining function 'read_weights(ap_int<32> (*) [288], unsigned int, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-178] Inlining function 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-248] Applying array_partition to 'filter': Complete partitioning on dimension 1. Cyclic partitioning with factor 4 on dimension 2. (sources/mixed_conv_w2/mixed_conv.cpp:284:15)
INFO: [HLS 214-248] Applying array_partition to 'inputMapLineAddr': Complete partitioning on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:286:6)
INFO: [HLS 214-248] Applying array_partition to 'bias': Cyclic partitioning with factor 16 on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:287:9)
INFO: [HLS 214-248] Applying array_partition to 'accum': Complete partitioning on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:288:10)
INFO: [HLS 200-111] Finished Compiling Optimization and Transform: CPU user time: 5.85 seconds. CPU system time: 0.26 seconds. Elapsed time: 6.1 seconds; current allocated memory: 226.160 MB.
INFO: [HLS 200-111] Finished Checking Pragmas: CPU user time: 0 seconds. CPU system time: 0 seconds. Elapsed time: 0 seconds; current allocated memory: 226.160 MB.
INFO: [HLS 200-10] Starting code transformations ...
INFO: [HLS 200-111] Finished Standard Transforms: CPU user time: 1.81 seconds. CPU system time: 0.01 seconds. Elapsed time: 1.81 seconds; current allocated memory: 261.859 MB.
INFO: [HLS 200-10] Checking synthesizability ...
WARNING: [SYNCHK 200-23] /home/mpv/tools/Xilinx/Vitis_HLS/2022.2/common/technology/autopilot/ap_int_ref.h:628: variable-indexed range selection may cause suboptimal QoR.
INFO: [SYNCHK 200-10] 0 error(s), 1 warning(s).
INFO: [HLS 200-111] Finished Checking Synthesizability: CPU user time: 1.93 seconds. CPU system time: 0.01 seconds. Elapsed time: 1.95 seconds; current allocated memory: 272.027 MB.
INFO: [XFORM 203-510] Pipelining loop 'ChannelLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288) in function 'conv_w2' automatically.
INFO: [XFORM 203-502] Unrolling all sub-loops inside loop 'ChannelLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288) in function 'conv_w2' for pipelining.
INFO: [HLS 200-489] Unrolling loop 'AccumAdjustmentLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288) in function 'conv_w2' completely with a factor of 16.
INFO: [HLS 200-489] Unrolling loop 'OutputStreamPackLOOP' in function 'conv_w2' completely with a factor of 16.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:174:12) to (sources/mixed_conv_w2/mixed_conv.cpp:195:2) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:103:11) to (sources/mixed_conv_w2/mixed_conv.cpp:95:2) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:394:56) to (sources/mixed_conv_w2/mixed_conv.cpp:442:11) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:371:7) to (sources/mixed_conv_w2/mixed_conv.cpp:495:11) in function 'conv_w2'... converting 610 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:140:8) to (sources/mixed_conv_w2/mixed_conv.cpp:450:8) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:502:21) in function 'conv_w2'... converting 33 basic blocks.
INFO: [XFORM 203-11] Balancing expressions in function 'conv_w2' (sources/mixed_conv_w2/mixed_conv.cpp:61:8)...518 expression(s) balanced.
INFO: [HLS 200-111] Finished Loop, function and other optimizations: CPU user time: 3.91 seconds. CPU system time: 0.02 seconds. Elapsed time: 3.94 seconds; current allocated memory: 345.379 MB.
INFO: [XFORM 203-541] Flattening a loop nest 'ReadBiasStreamsLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:232:14) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'KernelXLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'KernelYLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'FilterLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'OutXLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'OutYLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [HLS 200-472] Inferring partial write operation for 'bias.V' (sources/mixed_conv_w2/mixed_conv.cpp:246:24)
INFO: [HLS 200-472] Inferring partial write operation for 'filter.V.1' (sources/mixed_conv_w2/mixed_conv.cpp:171:27)
INFO: [HLS 200-472] Inferring partial write operation for 'inputMap.V' (sources/mixed_conv_w2/mixed_conv.cpp:61:21)
INFO: [HLS 200-472] Inferring partial write operation for 'inputMap.V' (sources/mixed_conv_w2/mixed_conv.cpp:71:21)
INFO: [HLS 200-111] Finished Architecture Synthesis: CPU user time: 0.99 seconds. CPU system time: 0.01 seconds. Elapsed time: 1 seconds; current allocated memory: 386.879 MB.
INFO: [HLS 200-10] Starting hardware synthesis ...
INFO: [HLS 200-10] Synthesizing 'conv_w2' ...
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_VITIS_LOOP_330_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'VITIS_LOOP_330_1'.
INFO: [HLS 200-1470] Pipelining result : Target II = 1, Final II = 1, Depth = 2, loop 'VITIS_LOOP_330_1'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.08 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.09 seconds; current allocated memory: 388.711 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.02 seconds. CPU system time: 0 seconds. Elapsed time: 0.01 seconds; current allocated memory: 388.711 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_240_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadBiasStreamsLOOP_VITIS_LOOP_240_1'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 3, loop 'ReadBiasStreamsLOOP_VITIS_LOOP_240_1'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.07 seconds. CPU system time: 0 seconds. Elapsed time: 0.08 seconds; current allocated memory: 390.227 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.04 seconds. CPU system time: 0 seconds. Elapsed time: 0.04 seconds; current allocated memory: 390.227 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadWeightStreamsLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 2, loop 'ReadWeightStreamsLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.56 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.57 seconds; current allocated memory: 399.281 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.12 seconds. CPU system time: 0 seconds. Elapsed time: 0.13 seconds; current allocated memory: 399.281 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadActivationsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadActivationsLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 2, loop 'ReadActivationsLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.17 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.17 seconds; current allocated memory: 399.281 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.04 seconds. CPU system time: 0 seconds. Elapsed time: 0.04 seconds; current allocated memory: 399.281 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_510) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_512) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_509) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_507) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_505) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_503) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_501) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_499) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_497) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_494) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_496) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_493) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_491) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_489) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_487) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_485) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_483) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_481) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_478) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_480) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_477) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_475) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_473) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_471) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_469) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_467) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_465) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_462) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_464) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_461) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_459) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_457) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_455) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_453) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_451) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_449) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_446) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_448) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_445) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_443) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_441) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_439) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_437) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_435) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_433) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_430) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_432) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_429) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_427) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_425) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_423) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_421) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_419) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_417) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_414) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_416) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_413) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_411) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_409) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_407) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_405) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_403) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_401) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_398) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_400) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_397) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_395) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_393) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_391) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_389) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_387) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_385) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_382) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_384) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_381) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_379) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_377) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_375) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_373) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_371) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_369) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_366) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_368) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_365) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_363) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_361) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_359) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_357) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_355) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_353) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_350) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_352) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_349) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_347) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_345) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_343) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_341) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_339) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_337) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_334) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_336) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_333) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_331) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_329) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_327) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_325) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_323) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_321) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_318) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_320) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_317) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_315) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_313) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_311) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_309) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_307) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_305) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_302) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_304) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_301) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_299) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_297) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_295) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_293) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_291) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_289) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_286) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_288) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_285) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_283) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_281) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_279) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_277) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_275) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_273) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_270) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_272) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_269) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_267) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_265) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_263) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_261) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_259) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_257) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_254) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_256) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_253) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_251) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_249) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_247) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_245) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_243) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_241) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_238) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_240) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_237) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_235) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_233) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_231) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_229) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_227) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_225) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_222) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_224) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_221) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_219) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_217) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_215) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_213) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_211) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_209) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_206) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_208) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_205) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_203) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_201) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_199) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_197) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_195) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_193) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_190) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_192) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_189) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_187) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_185) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_183) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_181) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_179) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_177) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_174) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_176) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_173) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_171) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_169) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_167) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_165) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_163) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_161) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_158) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_160) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_157) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_155) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_153) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_151) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_149) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_147) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_145) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_142) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_144) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_141) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_139) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_137) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_135) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_133) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_131) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_129) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_126) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_128) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_125) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_123) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_121) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_119) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_117) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_115) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_113) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_110) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_112) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_109) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_107) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_105) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_103) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_101) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_99) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_97) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_94) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_96) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_93) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_91) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_89) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_87) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_85) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_83) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_81) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_78) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_80) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_77) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_75) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_73) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_71) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_69) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_67) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_65) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_63) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_64) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_61) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_59) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_57) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_55) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_53) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_51) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_49) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_46) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_48) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_45) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_43) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_41) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_39) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_37) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_35) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_33) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_31) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_32) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_29) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_27) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_25) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_23) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_21) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_19) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_17) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_14) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_16) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_13) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_11) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_9) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_7) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_5) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_3) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_1) to 3 in order to utilize available DSP registers.
INFO: [SCHED 204-61] Pipelining loop 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 22, loop 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 3.49 seconds. CPU system time: 0.06 seconds. Elapsed time: 3.55 seconds; current allocated memory: 466.812 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 2.14 seconds. CPU system time: 0.01 seconds. Elapsed time: 2.15 seconds; current allocated memory: 466.812 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [HLS 200-486] Changing DSP latency (root=streamsPerFilter) to 3 in order to utilize available DSP registers.
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 3.18 seconds. CPU system time: 0.01 seconds. Elapsed time: 3.19 seconds; current allocated memory: 466.812 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 1.06 seconds. CPU system time: 0 seconds. Elapsed time: 1.06 seconds; current allocated memory: 466.812 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_VITIS_LOOP_330_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_VITIS_LOOP_330_1' pipeline 'VITIS_LOOP_330_1' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_VITIS_LOOP_330_1'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 2.65 seconds. CPU system time: 0.01 seconds. Elapsed time: 2.66 seconds; current allocated memory: 466.812 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_240_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_240_1' pipeline 'ReadBiasStreamsLOOP_VITIS_LOOP_240_1' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_240_1'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.06 seconds. CPU system time: 0 seconds. Elapsed time: 0.06 seconds; current allocated memory: 466.812 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' pipeline 'ReadWeightStreamsLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadWeightStreamsLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.3 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.3 seconds; current allocated memory: 466.812 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadActivationsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadActivationsLOOP' pipeline 'ReadActivationsLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Generating core module 'mux_53_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadActivationsLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.41 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.46 seconds; current allocated memory: 466.812 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' pipeline 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-104] Estimated max fanout for 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' is 12945 from HDL expression: (1'b0 == ap_block_pp0_stage0_11001)
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_10s_11_4_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_11s_12_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_32s_32_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_11s_12_4_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_12s_12_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_32s_32_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_2ns_12_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_3ns_13_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_13ns_3ns_16_1_1': 3 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_16ns_30s_32_1_1': 4 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32s_2ns_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_30s_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_8ns_2s_10_1_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_9s_2s_11_1_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mux_42_32_1_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mux_53_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'urem_12ns_4ns_4_16_1': 2 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 1.16 seconds. CPU system time: 0.01 seconds. Elapsed time: 1.36 seconds; current allocated memory: 503.500 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2' 
INFO: [HLS 200-10] ----------------------------------------------------------------
WARNING: [RTGEN 206-101] Design contains AXI ports. Reset is fixed to synchronous and active low.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_data_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_keep_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_strb_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_last_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_data_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_keep_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_strb_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_last_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/numFilters' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/numKernels' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/inputMapSizeX' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/inputMapSizeY' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/ctrl' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on function 'conv_w2' to 's_axilite & ap_ctrl_hs'.
INFO: [RTGEN 206-100] Bundling port 'numFilters', 'numKernels', 'inputMapSizeX', 'inputMapSizeY', 'ctrl' and 'return' to AXI-Lite port BUS1.
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_34ns_44_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_44ns_54_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_54ns_64_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_30s_32s_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_30s_3ns_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32ns_2ns_34_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32s_32s_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_28ns_31_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_31ns_34_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_3ns_6_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_mul_6ns_28s_32_4_1': 1 instance(s).
INFO: [RTGEN 206-100]==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
INFO: [SYN 201-201] Setting up clock 'default' with a period of 10ns.
INFO: [SYN 201-201] Setting up clock 'default' with an uncertainty of 0ns.
INFO: [HLS 200-1611] Setting target device to 'xczu7ev-ffvc1156-2-e'
INFO: [HLS 200-1505] Using flow_target 'vivado'
INFO: [HLS 200-1464] Running solution command: config_export -display_name=mixed_conv_w2
INFO: [HLS 200-1464] Running solution command: config_export -format=ip_catalog
INFO: [HLS 200-1464] Running solution command: config_export -output=/home/pferreira/HwSw/Vivado/IPs
INFO: [HLS 200-1464] Running solution command: config_export -rtl=verilog
INFO: [HLS 200-1464] Running solution command: config_export -version=1.5
INFO: [HLS 200-1510] Running: set_part xczu7ev-ffvc1156-2-e 
INFO: [HLS 200-1510] Running: create_clock -period 10 -name default 
INFO: [HLS 200-1510] Running: config_export -display_name mixed_conv_w2 -format ip_catalog -output /home/pferreira/HwSw/Vivado/IPs -rtl verilog -version 1.5 
INFO: [HLS 200-1510] Running: set_clock_uncertainty 0 
INFO: [HLS 200-1510] Running: source ./mixed_conv_w2a8/solution1/directives.tcl
INFO: [HLS 200-1510] Running: set_directive_top -name conv_w2 conv_w2 
INFO: [HLS 200-1510] Running: csynth_design 
INFO: [HLS 200-111] Finished File checks and directory preparation: CPU user time: 0 seconds. CPU system time: 0.01 seconds. Elapsed time: 10.02 seconds; current allocated memory: 223.621 MB.
INFO: [HLS 200-10] Analyzing design file 'sources/mixed_conv_w2/mixed_conv.cpp' ... 
INFO: [HLS 200-111] Finished Source Code Analysis and Preprocessing: CPU user time: 2.99 seconds. CPU system time: 0.26 seconds. Elapsed time: 3.32 seconds; current allocated memory: 225.098 MB.
INFO: [HLS 200-777] Using interface defaults for 'Vivado' flow target.
INFO: [HLS 214-131] Inlining function 'read_stream_weights(ap_int<32>*, unsigned int*, int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_weights(ap_int<32> (*) [9216], unsigned int, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:204:2)
INFO: [HLS 214-131] Inlining function 'save_padding_pixel(ap_int<128>*, unsigned int)' into 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:99:4)
INFO: [HLS 214-131] Inlining function 'read_stream_activations(ap_int<128>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:101:4)
INFO: [HLS 214-131] Inlining function 'save_padding_pixel(ap_int<128>*, unsigned int)' into 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:136:3)
INFO: [HLS 214-131] Inlining function 'read_stream_activations(ap_int<128>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:138:3)
INFO: [HLS 214-131] Inlining function 'PE(ap_int<128>, ap_int<32>, ap_int<32>*, bool)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:487:10)
INFO: [HLS 214-131] Inlining function 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:443:9)
INFO: [HLS 214-291] Loop 'WeightBusSeparationLOOP' is marked as complete unroll implied by the pipeline pragma (sources/mixed_conv_w2/mixed_conv.cpp:164:2)
INFO: [HLS 214-186] Unrolling loop 'AccumResetLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:455:9) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-186] Unrolling loop 'PECallLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:469:8) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-186] Unrolling loop 'PEOperationLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:18:2) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-186] Unrolling loop 'WeightBusSeparationLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:164:2) in function 'read_weights' completely with a factor of 4 (sources/mixed_conv_w2/mixed_conv.cpp:184:0)
INFO: [HLS 214-178] Inlining function 'read_bias(ap_int<8>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-178] Inlining function 'read_weights(ap_int<32> (*) [9216], unsigned int, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-178] Inlining function 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-248] Applying array_partition to 'filter': Complete partitioning on dimension 1. Cyclic partitioning with factor 4 on dimension 2. (sources/mixed_conv_w2/mixed_conv.cpp:284:15)
INFO: [HLS 214-248] Applying array_partition to 'inputMapLineAddr': Complete partitioning on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:286:6)
INFO: [HLS 214-248] Applying array_partition to 'bias': Cyclic partitioning with factor 16 on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:287:9)
INFO: [HLS 214-248] Applying array_partition to 'accum': Complete partitioning on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:288:10)
INFO: [HLS 200-111] Finished Compiling Optimization and Transform: CPU user time: 5.83 seconds. CPU system time: 0.28 seconds. Elapsed time: 6.1 seconds; current allocated memory: 226.246 MB.
INFO: [HLS 200-111] Finished Checking Pragmas: CPU user time: 0 seconds. CPU system time: 0 seconds. Elapsed time: 0 seconds; current allocated memory: 226.246 MB.
INFO: [HLS 200-10] Starting code transformations ...
INFO: [HLS 200-111] Finished Standard Transforms: CPU user time: 1.81 seconds. CPU system time: 0.02 seconds. Elapsed time: 1.83 seconds; current allocated memory: 261.879 MB.
INFO: [HLS 200-10] Checking synthesizability ...
WARNING: [SYNCHK 200-23] /home/mpv/tools/Xilinx/Vitis_HLS/2022.2/common/technology/autopilot/ap_int_ref.h:628: variable-indexed range selection may cause suboptimal QoR.
INFO: [SYNCHK 200-10] 0 error(s), 1 warning(s).
INFO: [HLS 200-111] Finished Checking Synthesizability: CPU user time: 1.94 seconds. CPU system time: 0 seconds. Elapsed time: 1.94 seconds; current allocated memory: 272.039 MB.
INFO: [XFORM 203-510] Pipelining loop 'ChannelLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288) in function 'conv_w2' automatically.
INFO: [XFORM 203-502] Unrolling all sub-loops inside loop 'ChannelLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288) in function 'conv_w2' for pipelining.
INFO: [HLS 200-489] Unrolling loop 'AccumAdjustmentLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288) in function 'conv_w2' completely with a factor of 16.
INFO: [HLS 200-489] Unrolling loop 'OutputStreamPackLOOP' in function 'conv_w2' completely with a factor of 16.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:174:12) to (sources/mixed_conv_w2/mixed_conv.cpp:195:2) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:103:11) to (sources/mixed_conv_w2/mixed_conv.cpp:95:2) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:394:56) to (sources/mixed_conv_w2/mixed_conv.cpp:442:11) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:371:7) to (sources/mixed_conv_w2/mixed_conv.cpp:495:11) in function 'conv_w2'... converting 610 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:140:8) to (sources/mixed_conv_w2/mixed_conv.cpp:450:8) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:502:21) in function 'conv_w2'... converting 33 basic blocks.
INFO: [XFORM 203-11] Balancing expressions in function 'conv_w2' (sources/mixed_conv_w2/mixed_conv.cpp:61:8)...518 expression(s) balanced.
INFO: [HLS 200-111] Finished Loop, function and other optimizations: CPU user time: 3.99 seconds. CPU system time: 0.02 seconds. Elapsed time: 4.01 seconds; current allocated memory: 345.406 MB.
INFO: [XFORM 203-541] Flattening a loop nest 'ReadBiasStreamsLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:232:14) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'KernelXLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'KernelYLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'FilterLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'OutXLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'OutYLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [HLS 200-472] Inferring partial write operation for 'bias.V' (sources/mixed_conv_w2/mixed_conv.cpp:246:24)
INFO: [HLS 200-472] Inferring partial write operation for 'filter.V.1' (sources/mixed_conv_w2/mixed_conv.cpp:171:27)
INFO: [HLS 200-472] Inferring partial write operation for 'inputMap.V' (sources/mixed_conv_w2/mixed_conv.cpp:61:21)
INFO: [HLS 200-472] Inferring partial write operation for 'inputMap.V' (sources/mixed_conv_w2/mixed_conv.cpp:71:21)
INFO: [HLS 200-111] Finished Architecture Synthesis: CPU user time: 1.03 seconds. CPU system time: 0 seconds. Elapsed time: 1.03 seconds; current allocated memory: 386.906 MB.
INFO: [HLS 200-10] Starting hardware synthesis ...
INFO: [HLS 200-10] Synthesizing 'conv_w2' ...
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_VITIS_LOOP_330_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'VITIS_LOOP_330_1'.
INFO: [HLS 200-1470] Pipelining result : Target II = 1, Final II = 1, Depth = 2, loop 'VITIS_LOOP_330_1'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.06 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.08 seconds; current allocated memory: 388.688 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.01 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.01 seconds; current allocated memory: 388.688 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_240_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadBiasStreamsLOOP_VITIS_LOOP_240_1'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 3, loop 'ReadBiasStreamsLOOP_VITIS_LOOP_240_1'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.08 seconds. CPU system time: 0 seconds. Elapsed time: 0.07 seconds; current allocated memory: 390.211 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.05 seconds. CPU system time: 0 seconds. Elapsed time: 0.05 seconds; current allocated memory: 390.211 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadWeightStreamsLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 2, loop 'ReadWeightStreamsLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.57 seconds. CPU system time: 0 seconds. Elapsed time: 0.58 seconds; current allocated memory: 399.238 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.13 seconds. CPU system time: 0 seconds. Elapsed time: 0.13 seconds; current allocated memory: 399.238 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadActivationsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadActivationsLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 2, loop 'ReadActivationsLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.18 seconds. CPU system time: 0 seconds. Elapsed time: 0.18 seconds; current allocated memory: 399.238 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.03 seconds. CPU system time: 0 seconds. Elapsed time: 0.04 seconds; current allocated memory: 399.238 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_510) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_512) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_509) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_507) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_505) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_503) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_501) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_499) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_497) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_494) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_496) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_493) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_491) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_489) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_487) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_485) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_483) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_481) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_478) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_480) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_477) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_475) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_473) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_471) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_469) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_467) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_465) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_462) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_464) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_461) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_459) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_457) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_455) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_453) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_451) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_449) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_446) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_448) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_445) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_443) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_441) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_439) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_437) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_435) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_433) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_430) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_432) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_429) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_427) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_425) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_423) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_421) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_419) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_417) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_414) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_416) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_413) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_411) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_409) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_407) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_405) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_403) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_401) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_398) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_400) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_397) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_395) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_393) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_391) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_389) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_387) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_385) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_382) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_384) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_381) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_379) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_377) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_375) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_373) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_371) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_369) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_366) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_368) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_365) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_363) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_361) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_359) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_357) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_355) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_353) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_350) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_352) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_349) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_347) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_345) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_343) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_341) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_339) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_337) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_334) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_336) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_333) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_331) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_329) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_327) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_325) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_323) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_321) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_318) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_320) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_317) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_315) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_313) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_311) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_309) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_307) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_305) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_302) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_304) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_301) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_299) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_297) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_295) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_293) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_291) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_289) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_286) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_288) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_285) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_283) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_281) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_279) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_277) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_275) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_273) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_270) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_272) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_269) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_267) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_265) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_263) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_261) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_259) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_257) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_254) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_256) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_253) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_251) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_249) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_247) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_245) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_243) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_241) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_238) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_240) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_237) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_235) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_233) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_231) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_229) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_227) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_225) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_222) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_224) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_221) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_219) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_217) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_215) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_213) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_211) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_209) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_206) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_208) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_205) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_203) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_201) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_199) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_197) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_195) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_193) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_190) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_192) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_189) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_187) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_185) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_183) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_181) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_179) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_177) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_174) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_176) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_173) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_171) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_169) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_167) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_165) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_163) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_161) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_158) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_160) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_157) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_155) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_153) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_151) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_149) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_147) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_145) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_142) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_144) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_141) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_139) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_137) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_135) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_133) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_131) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_129) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_126) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_128) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_125) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_123) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_121) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_119) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_117) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_115) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_113) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_110) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_112) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_109) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_107) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_105) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_103) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_101) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_99) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_97) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_94) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_96) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_93) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_91) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_89) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_87) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_85) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_83) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_81) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_78) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_80) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_77) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_75) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_73) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_71) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_69) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_67) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_65) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_63) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_64) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_61) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_59) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_57) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_55) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_53) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_51) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_49) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_46) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_48) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_45) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_43) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_41) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_39) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_37) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_35) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_33) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_31) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_32) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_29) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_27) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_25) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_23) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_21) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_19) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_17) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_14) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_16) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_13) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_11) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_9) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_7) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_5) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_3) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_1) to 3 in order to utilize available DSP registers.
INFO: [SCHED 204-61] Pipelining loop 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 22, loop 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 3.56 seconds. CPU system time: 0.06 seconds. Elapsed time: 3.63 seconds; current allocated memory: 467.211 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 2.19 seconds. CPU system time: 0 seconds. Elapsed time: 2.19 seconds; current allocated memory: 467.211 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [HLS 200-486] Changing DSP latency (root=streamsPerFilter) to 3 in order to utilize available DSP registers.
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 3.21 seconds. CPU system time: 0.02 seconds. Elapsed time: 3.23 seconds; current allocated memory: 467.211 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 1.08 seconds. CPU system time: 0 seconds. Elapsed time: 1.08 seconds; current allocated memory: 467.211 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_VITIS_LOOP_330_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_VITIS_LOOP_330_1' pipeline 'VITIS_LOOP_330_1' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_VITIS_LOOP_330_1'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 2.67 seconds. CPU system time: 0.01 seconds. Elapsed time: 2.68 seconds; current allocated memory: 467.211 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_240_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_240_1' pipeline 'ReadBiasStreamsLOOP_VITIS_LOOP_240_1' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_240_1'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.06 seconds. CPU system time: 0 seconds. Elapsed time: 0.06 seconds; current allocated memory: 467.211 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' pipeline 'ReadWeightStreamsLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadWeightStreamsLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.28 seconds. CPU system time: 0 seconds. Elapsed time: 0.28 seconds; current allocated memory: 467.211 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadActivationsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadActivationsLOOP' pipeline 'ReadActivationsLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Generating core module 'mux_53_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadActivationsLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.4 seconds. CPU system time: 0 seconds. Elapsed time: 0.41 seconds; current allocated memory: 467.211 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' pipeline 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-104] Estimated max fanout for 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' is 12945 from HDL expression: (1'b0 == ap_block_pp0_stage0_11001)
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_10s_11_4_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_11s_12_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_32s_32_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_11s_12_4_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_12s_12_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_32s_32_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_2ns_12_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_3ns_13_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_13ns_3ns_16_1_1': 3 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_16ns_30s_32_1_1': 4 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32s_2ns_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_30s_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_8ns_2s_10_1_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_9s_2s_11_1_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mux_42_32_1_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mux_53_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'urem_12ns_4ns_4_16_1': 2 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 1.07 seconds. CPU system time: 0.02 seconds. Elapsed time: 1.09 seconds; current allocated memory: 503.484 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2' 
INFO: [HLS 200-10] ----------------------------------------------------------------
WARNING: [RTGEN 206-101] Design contains AXI ports. Reset is fixed to synchronous and active low.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_data_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_keep_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_strb_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_last_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_data_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_keep_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_strb_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_last_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/numFilters' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/numKernels' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/inputMapSizeX' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/inputMapSizeY' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/ctrl' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on function 'conv_w2' to 's_axilite & ap_ctrl_hs'.
INFO: [RTGEN 206-100] Bundling port 'numFilters', 'numKernels', 'inputMapSizeX', 'inputMapSizeY', 'ctrl' and 'return' to AXI-Lite port BUS1.
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_34ns_44_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_44ns_54_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_54ns_64_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_30s_32s_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_30s_3ns_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32ns_2ns_34_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32s_32s_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_28ns_31_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_31ns_34_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_3ns_6_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_mul_6ns_28s_32_4_1': 1 instance(s).
INFO: [RTGEN 206-100]==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
INFO: [SYN 201-201] Setting up clock 'default' with a period of 10ns.
INFO: [SYN 201-201] Setting up clock 'default' with an uncertainty of 0ns.
INFO: [HLS 200-1611] Setting target device to 'xczu7ev-ffvc1156-2-e'
INFO: [HLS 200-1505] Using flow_target 'vivado'
INFO: [HLS 200-1464] Running solution command: config_export -display_name=mixed_conv_w2
INFO: [HLS 200-1464] Running solution command: config_export -format=ip_catalog
INFO: [HLS 200-1464] Running solution command: config_export -output=/home/pferreira/HwSw/Vivado/IPs
INFO: [HLS 200-1464] Running solution command: config_export -rtl=verilog
INFO: [HLS 200-1464] Running solution command: config_export -version=1.6
INFO: [HLS 200-1510] Running: set_part xczu7ev-ffvc1156-2-e 
INFO: [HLS 200-1510] Running: create_clock -period 10 -name default 
INFO: [HLS 200-1510] Running: config_export -display_name mixed_conv_w2 -format ip_catalog -output /home/pferreira/HwSw/Vivado/IPs -rtl verilog -version 1.6 
INFO: [HLS 200-1510] Running: set_clock_uncertainty 0 
INFO: [HLS 200-1510] Running: source ./mixed_conv_w2a8/solution1/directives.tcl
INFO: [HLS 200-1510] Running: set_directive_top -name conv_w2 conv_w2 
INFO: [HLS 200-1510] Running: csynth_design 
INFO: [HLS 200-111] Finished File checks and directory preparation: CPU user time: 0.03 seconds. CPU system time: 0 seconds. Elapsed time: 10.04 seconds; current allocated memory: 223.625 MB.
INFO: [HLS 200-10] Analyzing design file 'sources/mixed_conv_w2/mixed_conv.cpp' ... 
INFO: [HLS 200-111] Finished Source Code Analysis and Preprocessing: CPU user time: 3.12 seconds. CPU system time: 0.33 seconds. Elapsed time: 4.87 seconds; current allocated memory: 225.102 MB.
INFO: [HLS 200-777] Using interface defaults for 'Vivado' flow target.
INFO: [HLS 214-131] Inlining function 'read_stream_weights(ap_int<32>*, unsigned int*, int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_weights(ap_int<32> (*) [9216], unsigned int, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:204:2)
INFO: [HLS 214-131] Inlining function 'save_padding_pixel(ap_int<128>*, unsigned int)' into 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:99:4)
INFO: [HLS 214-131] Inlining function 'read_stream_activations(ap_int<128>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:101:4)
INFO: [HLS 214-131] Inlining function 'save_padding_pixel(ap_int<128>*, unsigned int)' into 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:136:3)
INFO: [HLS 214-131] Inlining function 'read_stream_activations(ap_int<128>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:138:3)
INFO: [HLS 214-131] Inlining function 'PE(ap_int<128>, ap_int<32>, ap_int<32>*, bool)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:488:10)
INFO: [HLS 214-131] Inlining function 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:444:9)
INFO: [HLS 214-291] Loop 'WeightBusSeparationLOOP' is marked as complete unroll implied by the pipeline pragma (sources/mixed_conv_w2/mixed_conv.cpp:164:2)
INFO: [HLS 214-186] Unrolling loop 'AccumResetLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:456:9) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-186] Unrolling loop 'PECallLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:470:8) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-186] Unrolling loop 'PEOperationLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:18:2) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-186] Unrolling loop 'WeightBusSeparationLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:164:2) in function 'read_weights' completely with a factor of 4 (sources/mixed_conv_w2/mixed_conv.cpp:184:0)
INFO: [HLS 214-178] Inlining function 'read_bias(ap_int<8>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-178] Inlining function 'read_weights(ap_int<32> (*) [9216], unsigned int, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-178] Inlining function 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-248] Applying array_partition to 'filter': Complete partitioning on dimension 1. Cyclic partitioning with factor 4 on dimension 2. (sources/mixed_conv_w2/mixed_conv.cpp:284:15)
INFO: [HLS 214-248] Applying array_partition to 'inputMapLineAddr': Complete partitioning on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:286:6)
INFO: [HLS 214-248] Applying array_partition to 'bias': Cyclic partitioning with factor 16 on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:287:9)
INFO: [HLS 214-248] Applying array_partition to 'accum': Complete partitioning on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:288:10)
INFO: [HLS 200-111] Finished Compiling Optimization and Transform: CPU user time: 6.1 seconds. CPU system time: 0.32 seconds. Elapsed time: 8.05 seconds; current allocated memory: 226.250 MB.
INFO: [HLS 200-111] Finished Checking Pragmas: CPU user time: 0 seconds. CPU system time: 0 seconds. Elapsed time: 0 seconds; current allocated memory: 226.250 MB.
INFO: [HLS 200-10] Starting code transformations ...
INFO: [HLS 200-111] Finished Standard Transforms: CPU user time: 1.89 seconds. CPU system time: 0.02 seconds. Elapsed time: 2.17 seconds; current allocated memory: 261.914 MB.
INFO: [HLS 200-10] Checking synthesizability ...
WARNING: [SYNCHK 200-23] /home/mpv/tools/Xilinx/Vitis_HLS/2022.2/common/technology/autopilot/ap_int_ref.h:628: variable-indexed range selection may cause suboptimal QoR.
INFO: [SYNCHK 200-10] 0 error(s), 1 warning(s).
INFO: [HLS 200-111] Finished Checking Synthesizability: CPU user time: 1.91 seconds. CPU system time: 0.01 seconds. Elapsed time: 1.92 seconds; current allocated memory: 271.566 MB.
INFO: [XFORM 203-510] Pipelining loop 'ChannelLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288) in function 'conv_w2' automatically.
INFO: [XFORM 203-502] Unrolling all sub-loops inside loop 'ChannelLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288) in function 'conv_w2' for pipelining.
INFO: [HLS 200-489] Unrolling loop 'AccumAdjustmentLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288) in function 'conv_w2' completely with a factor of 16.
INFO: [HLS 200-489] Unrolling loop 'OutputStreamPackLOOP' in function 'conv_w2' completely with a factor of 16.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:174:12) to (sources/mixed_conv_w2/mixed_conv.cpp:195:2) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:103:11) to (sources/mixed_conv_w2/mixed_conv.cpp:95:2) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:395:56) to (sources/mixed_conv_w2/mixed_conv.cpp:443:11) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:372:7) to (sources/mixed_conv_w2/mixed_conv.cpp:496:11) in function 'conv_w2'... converting 610 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:140:8) to (sources/mixed_conv_w2/mixed_conv.cpp:451:8) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:503:21) in function 'conv_w2'... converting 33 basic blocks.
INFO: [XFORM 203-11] Balancing expressions in function 'conv_w2' (sources/mixed_conv_w2/mixed_conv.cpp:61:8)...518 expression(s) balanced.
INFO: [HLS 200-111] Finished Loop, function and other optimizations: CPU user time: 3.96 seconds. CPU system time: 0.02 seconds. Elapsed time: 3.99 seconds; current allocated memory: 345.539 MB.
INFO: [XFORM 203-541] Flattening a loop nest 'ReadBiasStreamsLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:232:14) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'KernelXLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'KernelYLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'FilterLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'OutXLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'OutYLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [HLS 200-472] Inferring partial write operation for 'bias.V' (sources/mixed_conv_w2/mixed_conv.cpp:246:24)
INFO: [HLS 200-472] Inferring partial write operation for 'filter.V.1' (sources/mixed_conv_w2/mixed_conv.cpp:171:27)
INFO: [HLS 200-472] Inferring partial write operation for 'inputMap.V' (sources/mixed_conv_w2/mixed_conv.cpp:61:21)
INFO: [HLS 200-472] Inferring partial write operation for 'inputMap.V' (sources/mixed_conv_w2/mixed_conv.cpp:71:21)
INFO: [HLS 200-111] Finished Architecture Synthesis: CPU user time: 1 seconds. CPU system time: 0.01 seconds. Elapsed time: 1.02 seconds; current allocated memory: 386.543 MB.
INFO: [HLS 200-10] Starting hardware synthesis ...
INFO: [HLS 200-10] Synthesizing 'conv_w2' ...
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_VITIS_LOOP_330_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'VITIS_LOOP_330_1'.
INFO: [HLS 200-1470] Pipelining result : Target II = 1, Final II = 1, Depth = 2, loop 'VITIS_LOOP_330_1'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.1 seconds. CPU system time: 0.02 seconds. Elapsed time: 0.24 seconds; current allocated memory: 388.742 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.05 seconds. CPU system time: 0 seconds. Elapsed time: 0.09 seconds; current allocated memory: 388.742 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_240_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadBiasStreamsLOOP_VITIS_LOOP_240_1'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 3, loop 'ReadBiasStreamsLOOP_VITIS_LOOP_240_1'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.08 seconds. CPU system time: 0 seconds. Elapsed time: 0.09 seconds; current allocated memory: 390.270 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.04 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.04 seconds; current allocated memory: 390.270 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadWeightStreamsLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 2, loop 'ReadWeightStreamsLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.57 seconds. CPU system time: 0 seconds. Elapsed time: 0.57 seconds; current allocated memory: 399.328 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.12 seconds. CPU system time: 0 seconds. Elapsed time: 0.13 seconds; current allocated memory: 399.328 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadActivationsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadActivationsLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 2, loop 'ReadActivationsLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.18 seconds. CPU system time: 0 seconds. Elapsed time: 0.17 seconds; current allocated memory: 399.328 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.03 seconds. CPU system time: 0 seconds. Elapsed time: 0.04 seconds; current allocated memory: 399.328 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_510) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_512) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_509) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_507) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_505) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_503) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_501) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_499) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_497) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_494) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_496) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_493) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_491) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_489) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_487) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_485) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_483) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_481) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_478) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_480) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_477) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_475) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_473) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_471) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_469) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_467) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_465) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_462) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_464) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_461) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_459) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_457) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_455) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_453) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_451) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_449) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_446) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_448) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_445) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_443) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_441) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_439) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_437) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_435) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_433) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_430) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_432) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_429) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_427) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_425) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_423) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_421) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_419) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_417) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_414) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_416) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_413) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_411) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_409) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_407) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_405) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_403) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_401) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_398) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_400) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_397) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_395) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_393) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_391) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_389) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_387) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_385) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_382) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_384) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_381) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_379) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_377) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_375) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_373) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_371) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_369) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_366) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_368) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_365) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_363) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_361) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_359) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_357) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_355) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_353) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_350) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_352) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_349) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_347) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_345) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_343) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_341) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_339) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_337) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_334) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_336) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_333) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_331) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_329) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_327) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_325) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_323) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_321) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_318) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_320) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_317) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_315) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_313) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_311) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_309) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_307) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_305) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_302) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_304) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_301) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_299) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_297) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_295) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_293) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_291) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_289) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_286) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_288) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_285) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_283) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_281) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_279) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_277) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_275) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_273) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_270) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_272) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_269) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_267) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_265) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_263) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_261) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_259) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_257) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_254) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_256) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_253) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_251) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_249) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_247) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_245) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_243) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_241) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_238) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_240) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_237) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_235) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_233) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_231) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_229) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_227) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_225) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_222) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_224) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_221) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_219) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_217) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_215) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_213) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_211) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_209) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_206) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_208) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_205) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_203) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_201) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_199) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_197) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_195) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_193) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_190) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_192) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_189) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_187) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_185) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_183) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_181) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_179) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_177) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_174) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_176) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_173) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_171) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_169) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_167) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_165) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_163) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_161) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_158) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_160) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_157) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_155) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_153) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_151) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_149) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_147) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_145) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_142) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_144) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_141) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_139) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_137) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_135) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_133) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_131) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_129) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_126) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_128) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_125) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_123) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_121) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_119) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_117) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_115) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_113) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_110) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_112) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_109) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_107) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_105) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_103) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_101) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_99) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_97) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_94) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_96) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_93) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_91) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_89) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_87) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_85) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_83) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_81) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_78) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_80) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_77) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_75) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_73) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_71) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_69) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_67) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_65) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_63) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_64) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_61) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_59) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_57) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_55) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_53) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_51) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_49) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_46) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_48) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_45) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_43) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_41) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_39) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_37) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_35) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_33) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_31) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_32) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_29) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_27) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_25) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_23) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_21) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_19) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_17) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_14) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_16) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_13) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_11) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_9) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_7) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_5) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_3) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_1) to 3 in order to utilize available DSP registers.
INFO: [SCHED 204-61] Pipelining loop 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 22, loop 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 3.49 seconds. CPU system time: 0.06 seconds. Elapsed time: 3.58 seconds; current allocated memory: 455.051 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 2.13 seconds. CPU system time: 0.01 seconds. Elapsed time: 2.14 seconds; current allocated memory: 455.051 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [HLS 200-486] Changing DSP latency (root=streamsPerFilter) to 3 in order to utilize available DSP registers.
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 3.14 seconds. CPU system time: 0 seconds. Elapsed time: 3.15 seconds; current allocated memory: 455.051 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 1.06 seconds. CPU system time: 0 seconds. Elapsed time: 1.06 seconds; current allocated memory: 455.051 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_VITIS_LOOP_330_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_VITIS_LOOP_330_1' pipeline 'VITIS_LOOP_330_1' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_VITIS_LOOP_330_1'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 2.62 seconds. CPU system time: 0 seconds. Elapsed time: 2.64 seconds; current allocated memory: 455.051 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_240_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_240_1' pipeline 'ReadBiasStreamsLOOP_VITIS_LOOP_240_1' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_240_1'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.05 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.06 seconds; current allocated memory: 455.051 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' pipeline 'ReadWeightStreamsLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadWeightStreamsLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.28 seconds. CPU system time: 0 seconds. Elapsed time: 0.28 seconds; current allocated memory: 455.051 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadActivationsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadActivationsLOOP' pipeline 'ReadActivationsLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Generating core module 'mux_53_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadActivationsLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.4 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.42 seconds; current allocated memory: 455.051 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' pipeline 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-104] Estimated max fanout for 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' is 12945 from HDL expression: (1'b0 == ap_block_pp0_stage0_11001)
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_10s_11_4_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_11s_12_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_32s_32_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_11s_12_4_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_12s_12_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_32s_32_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_2ns_12_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_3ns_13_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_13ns_3ns_16_1_1': 3 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_16ns_30s_32_1_1': 4 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32s_2ns_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_30s_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_8ns_2s_10_1_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_9s_2s_11_1_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mux_42_32_1_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mux_53_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'urem_12ns_4ns_4_16_1': 2 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 1.12 seconds. CPU system time: 0.02 seconds. Elapsed time: 1.31 seconds; current allocated memory: 503.531 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2' 
INFO: [HLS 200-10] ----------------------------------------------------------------
WARNING: [RTGEN 206-101] Design contains AXI ports. Reset is fixed to synchronous and active low.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_data_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_keep_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_strb_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_last_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_data_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_keep_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_strb_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_last_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/numFilters' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/numKernels' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/inputMapSizeX' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/inputMapSizeY' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/ctrl' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on function 'conv_w2' to 's_axilite & ap_ctrl_hs'.
INFO: [RTGEN 206-100] Bundling port 'numFilters', 'numKernels', 'inputMapSizeX', 'inputMapSizeY', 'ctrl' and 'return' to AXI-Lite port BUS1.
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_34ns_44_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_44ns_54_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_54ns_64_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_30s_32s_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_30s_3ns_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32ns_2ns_34_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32s_32s_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_28ns_31_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_31ns_34_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_3ns_6_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_mul_6ns_28s_32_4_1': 1 instance(s).
INFO: [RTGEN 206-100]==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
INFO: [SYN 201-201] Setting up clock 'default' with a period of 10ns.
INFO: [SYN 201-201] Setting up clock 'default' with an uncertainty of 0ns.
INFO: [HLS 200-1611] Setting target device to 'xczu7ev-ffvc1156-2-e'
INFO: [HLS 200-1505] Using flow_target 'vivado'
INFO: [HLS 200-1464] Running solution command: config_export -display_name=mixed_conv_w2
INFO: [HLS 200-1464] Running solution command: config_export -format=ip_catalog
INFO: [HLS 200-1464] Running solution command: config_export -output=/home/pferreira/HwSw/Vivado/IPs
INFO: [HLS 200-1464] Running solution command: config_export -rtl=verilog
INFO: [HLS 200-1464] Running solution command: config_export -version=1.6
INFO: [HLS 200-1510] Running: set_part xczu7ev-ffvc1156-2-e 
INFO: [HLS 200-1510] Running: create_clock -period 10 -name default 
INFO: [HLS 200-1510] Running: config_export -display_name mixed_conv_w2 -format ip_catalog -output /home/pferreira/HwSw/Vivado/IPs -rtl verilog -version 1.6 
INFO: [HLS 200-1510] Running: set_clock_uncertainty 0 
INFO: [HLS 200-1510] Running: source ./mixed_conv_w2a8/solution1/directives.tcl
INFO: [HLS 200-1510] Running: set_directive_top -name conv_w2 conv_w2 
INFO: [HLS 200-1510] Running: csynth_design 
INFO: [HLS 200-111] Finished File checks and directory preparation: CPU user time: 0.01 seconds. CPU system time: 0 seconds. Elapsed time: 10.02 seconds; current allocated memory: 223.625 MB.
INFO: [HLS 200-10] Analyzing design file 'sources/mixed_conv_w2/mixed_conv.cpp' ... 
INFO: [HLS 200-111] Finished Source Code Analysis and Preprocessing: CPU user time: 2.99 seconds. CPU system time: 0.25 seconds. Elapsed time: 3.26 seconds; current allocated memory: 225.102 MB.
INFO: [HLS 200-777] Using interface defaults for 'Vivado' flow target.
INFO: [HLS 214-131] Inlining function 'read_stream_weights(ap_int<32>*, unsigned int*, int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_weights(ap_int<32> (*) [9216], unsigned int, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:204:2)
INFO: [HLS 214-131] Inlining function 'save_padding_pixel(ap_int<128>*, unsigned int)' into 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:99:4)
INFO: [HLS 214-131] Inlining function 'read_stream_activations(ap_int<128>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:101:4)
INFO: [HLS 214-131] Inlining function 'save_padding_pixel(ap_int<128>*, unsigned int)' into 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:136:3)
INFO: [HLS 214-131] Inlining function 'read_stream_activations(ap_int<128>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' (sources/mixed_conv_w2/mixed_conv.cpp:138:3)
INFO: [HLS 214-131] Inlining function 'PE(ap_int<128>, ap_int<32>, ap_int<32>*, bool)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:488:10)
INFO: [HLS 214-131] Inlining function 'read_feature_map_once(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:444:9)
INFO: [HLS 214-291] Loop 'WeightBusSeparationLOOP' is marked as complete unroll implied by the pipeline pragma (sources/mixed_conv_w2/mixed_conv.cpp:164:2)
INFO: [HLS 214-186] Unrolling loop 'AccumResetLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:456:9) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-186] Unrolling loop 'PECallLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:470:8) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-186] Unrolling loop 'PEOperationLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:18:2) in function 'conv_w2' completely with a factor of 16 (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-186] Unrolling loop 'WeightBusSeparationLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:164:2) in function 'read_weights' completely with a factor of 4 (sources/mixed_conv_w2/mixed_conv.cpp:184:0)
INFO: [HLS 214-178] Inlining function 'read_bias(ap_int<8>*, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-178] Inlining function 'read_weights(ap_int<32> (*) [9216], unsigned int, unsigned int, unsigned int, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-178] Inlining function 'read_feature_map(ap_int<128>*, unsigned int, unsigned int, unsigned int, unsigned int, int*, unsigned int, unsigned int*, unsigned int*, unsigned int*, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&)' into 'conv_w2(hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, hls::stream<hls::axis<ap_int<128>, 0ul, 0ul, 0ul>, 0>&, int, int, int, int, int)' (sources/mixed_conv_w2/mixed_conv.cpp:262:0)
INFO: [HLS 214-248] Applying array_partition to 'filter': Complete partitioning on dimension 1. Cyclic partitioning with factor 4 on dimension 2. (sources/mixed_conv_w2/mixed_conv.cpp:284:15)
INFO: [HLS 214-248] Applying array_partition to 'inputMapLineAddr': Complete partitioning on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:286:6)
INFO: [HLS 214-248] Applying array_partition to 'bias': Cyclic partitioning with factor 16 on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:287:9)
INFO: [HLS 214-248] Applying array_partition to 'accum': Complete partitioning on dimension 1. (sources/mixed_conv_w2/mixed_conv.cpp:288:10)
INFO: [HLS 200-111] Finished Compiling Optimization and Transform: CPU user time: 6.6 seconds. CPU system time: 0.24 seconds. Elapsed time: 6.84 seconds; current allocated memory: 226.250 MB.
INFO: [HLS 200-111] Finished Checking Pragmas: CPU user time: 0 seconds. CPU system time: 0 seconds. Elapsed time: 0 seconds; current allocated memory: 226.250 MB.
INFO: [HLS 200-10] Starting code transformations ...
INFO: [HLS 200-111] Finished Standard Transforms: CPU user time: 2.15 seconds. CPU system time: 0 seconds. Elapsed time: 2.16 seconds; current allocated memory: 261.945 MB.
INFO: [HLS 200-10] Checking synthesizability ...
WARNING: [SYNCHK 200-23] /home/mpv/tools/Xilinx/Vitis_HLS/2022.2/common/technology/autopilot/ap_int_ref.h:628: variable-indexed range selection may cause suboptimal QoR.
INFO: [SYNCHK 200-10] 0 error(s), 1 warning(s).
INFO: [HLS 200-111] Finished Checking Synthesizability: CPU user time: 2.24 seconds. CPU system time: 0 seconds. Elapsed time: 2.24 seconds; current allocated memory: 271.574 MB.
INFO: [XFORM 203-510] Pipelining loop 'ChannelLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288) in function 'conv_w2' automatically.
INFO: [XFORM 203-502] Unrolling all sub-loops inside loop 'ChannelLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288) in function 'conv_w2' for pipelining.
INFO: [HLS 200-489] Unrolling loop 'AccumAdjustmentLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288) in function 'conv_w2' completely with a factor of 16.
INFO: [HLS 200-489] Unrolling loop 'OutputStreamPackLOOP' in function 'conv_w2' completely with a factor of 16.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:174:12) to (sources/mixed_conv_w2/mixed_conv.cpp:195:2) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:103:11) to (sources/mixed_conv_w2/mixed_conv.cpp:95:2) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:395:56) to (sources/mixed_conv_w2/mixed_conv.cpp:443:11) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:372:7) to (sources/mixed_conv_w2/mixed_conv.cpp:496:11) in function 'conv_w2'... converting 610 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:140:8) to (sources/mixed_conv_w2/mixed_conv.cpp:451:8) in function 'conv_w2'... converting 3 basic blocks.
INFO: [XFORM 203-401] Performing if-conversion on hyperblock from (sources/mixed_conv_w2/mixed_conv.cpp:503:21) in function 'conv_w2'... converting 33 basic blocks.
INFO: [XFORM 203-11] Balancing expressions in function 'conv_w2' (sources/mixed_conv_w2/mixed_conv.cpp:61:8)...518 expression(s) balanced.
INFO: [HLS 200-111] Finished Loop, function and other optimizations: CPU user time: 4.25 seconds. CPU system time: 0.01 seconds. Elapsed time: 4.26 seconds; current allocated memory: 345.539 MB.
INFO: [XFORM 203-541] Flattening a loop nest 'ReadBiasStreamsLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:232:14) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'KernelXLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'KernelYLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'FilterLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'OutXLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [XFORM 203-541] Flattening a loop nest 'OutYLOOP' (sources/mixed_conv_w2/mixed_conv.cpp:288:10) in function 'conv_w2'.
INFO: [HLS 200-472] Inferring partial write operation for 'bias.V' (sources/mixed_conv_w2/mixed_conv.cpp:246:24)
INFO: [HLS 200-472] Inferring partial write operation for 'filter.V.1' (sources/mixed_conv_w2/mixed_conv.cpp:171:27)
INFO: [HLS 200-472] Inferring partial write operation for 'inputMap.V' (sources/mixed_conv_w2/mixed_conv.cpp:61:21)
INFO: [HLS 200-472] Inferring partial write operation for 'inputMap.V' (sources/mixed_conv_w2/mixed_conv.cpp:71:21)
INFO: [HLS 200-111] Finished Architecture Synthesis: CPU user time: 1.05 seconds. CPU system time: 0.01 seconds. Elapsed time: 1.06 seconds; current allocated memory: 387.039 MB.
INFO: [HLS 200-10] Starting hardware synthesis ...
INFO: [HLS 200-10] Synthesizing 'conv_w2' ...
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_VITIS_LOOP_330_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'VITIS_LOOP_330_1'.
INFO: [HLS 200-1470] Pipelining result : Target II = 1, Final II = 1, Depth = 2, loop 'VITIS_LOOP_330_1'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.08 seconds. CPU system time: 0 seconds. Elapsed time: 0.09 seconds; current allocated memory: 388.742 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.01 seconds. CPU system time: 0 seconds. Elapsed time: 0.01 seconds; current allocated memory: 388.742 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_240_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadBiasStreamsLOOP_VITIS_LOOP_240_1'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 3, loop 'ReadBiasStreamsLOOP_VITIS_LOOP_240_1'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.08 seconds. CPU system time: 0 seconds. Elapsed time: 0.08 seconds; current allocated memory: 390.254 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.04 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.05 seconds; current allocated memory: 390.254 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadWeightStreamsLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 2, loop 'ReadWeightStreamsLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.59 seconds. CPU system time: 0 seconds. Elapsed time: 0.59 seconds; current allocated memory: 399.324 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.13 seconds. CPU system time: 0 seconds. Elapsed time: 0.13 seconds; current allocated memory: 399.324 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_ReadActivationsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [SCHED 204-61] Pipelining loop 'ReadActivationsLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 2, loop 'ReadActivationsLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 0.18 seconds. CPU system time: 0 seconds. Elapsed time: 0.18 seconds; current allocated memory: 399.324 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 0.04 seconds. CPU system time: 0 seconds. Elapsed time: 0.04 seconds; current allocated memory: 399.324 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_510) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_512) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_509) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_507) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_505) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_503) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_501) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_499) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_497) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_494) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_496) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_493) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_491) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_489) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_487) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_485) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_483) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_481) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_478) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_480) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_477) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_475) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_473) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_471) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_469) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_467) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_465) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_462) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_464) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_461) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_459) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_457) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_455) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_453) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_451) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_449) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_446) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_448) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_445) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_443) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_441) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_439) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_437) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_435) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_433) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_430) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_432) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_429) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_427) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_425) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_423) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_421) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_419) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_417) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_414) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_416) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_413) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_411) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_409) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_407) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_405) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_403) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_401) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_398) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_400) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_397) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_395) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_393) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_391) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_389) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_387) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_385) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_382) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_384) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_381) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_379) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_377) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_375) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_373) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_371) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_369) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_366) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_368) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_365) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_363) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_361) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_359) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_357) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_355) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_353) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_350) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_352) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_349) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_347) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_345) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_343) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_341) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_339) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_337) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_334) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_336) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_333) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_331) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_329) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_327) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_325) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_323) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_321) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_318) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_320) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_317) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_315) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_313) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_311) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_309) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_307) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_305) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_302) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_304) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_301) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_299) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_297) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_295) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_293) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_291) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_289) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_286) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_288) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_285) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_283) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_281) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_279) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_277) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_275) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_273) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_270) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_272) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_269) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_267) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_265) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_263) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_261) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_259) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_257) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_254) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_256) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_253) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_251) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_249) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_247) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_245) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_243) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_241) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_238) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_240) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_237) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_235) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_233) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_231) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_229) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_227) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_225) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_222) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_224) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_221) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_219) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_217) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_215) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_213) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_211) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_209) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_206) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_208) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_205) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_203) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_201) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_199) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_197) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_195) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_193) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_190) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_192) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_189) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_187) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_185) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_183) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_181) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_179) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_177) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_174) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_176) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_173) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_171) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_169) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_167) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_165) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_163) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_161) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_158) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_160) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_157) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_155) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_153) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_151) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_149) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_147) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_145) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_142) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_144) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_141) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_139) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_137) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_135) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_133) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_131) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_129) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_126) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_128) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_125) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_123) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_121) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_119) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_117) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_115) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_113) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_110) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_112) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_109) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_107) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_105) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_103) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_101) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_99) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_97) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_94) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_96) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_93) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_91) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_89) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_87) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_85) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_83) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_81) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_78) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_80) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_77) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_75) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_73) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_71) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_69) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_67) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_65) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_63) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_64) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_61) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_59) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_57) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_55) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_53) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_51) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_49) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_46) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_48) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_45) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_43) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_41) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_39) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_37) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_35) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_33) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_31) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_32) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_29) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_27) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_25) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_23) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_21) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_19) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_17) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_14) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_16) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_13) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_11) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_9) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_7) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_5) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_3) to 3 in order to utilize available DSP registers.
INFO: [HLS 200-486] Changing DSP latency (root=ret_V_1) to 3 in order to utilize available DSP registers.
INFO: [SCHED 204-61] Pipelining loop 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'.
INFO: [HLS 200-1470] Pipelining result : Target II = NA, Final II = 1, Depth = 22, loop 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 3.65 seconds. CPU system time: 0.05 seconds. Elapsed time: 3.75 seconds; current allocated memory: 455.125 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 2.14 seconds. CPU system time: 0.01 seconds. Elapsed time: 2.15 seconds; current allocated memory: 455.125 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-42] -- Implementing module 'conv_w2' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [SCHED 204-11] Starting scheduling ...
INFO: [HLS 200-486] Changing DSP latency (root=streamsPerFilter) to 3 in order to utilize available DSP registers.
INFO: [SCHED 204-11] Finished scheduling.
INFO: [HLS 200-111] Finished Scheduling: CPU user time: 3.38 seconds. CPU system time: 0.03 seconds. Elapsed time: 3.41 seconds; current allocated memory: 455.125 MB.
INFO: [BIND 205-100] Starting micro-architecture generation ...
INFO: [BIND 205-101] Performing variable lifetime analysis.
INFO: [BIND 205-101] Exploring resource sharing.
INFO: [BIND 205-101] Binding ...
INFO: [BIND 205-100] Finished micro-architecture generation.
INFO: [HLS 200-111] Finished Binding: CPU user time: 1.56 seconds. CPU system time: 0 seconds. Elapsed time: 1.57 seconds; current allocated memory: 455.125 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_VITIS_LOOP_330_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_VITIS_LOOP_330_1' pipeline 'VITIS_LOOP_330_1' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_VITIS_LOOP_330_1'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 4.3 seconds. CPU system time: 0.01 seconds. Elapsed time: 4.31 seconds; current allocated memory: 455.125 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_240_1' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_240_1' pipeline 'ReadBiasStreamsLOOP_VITIS_LOOP_240_1' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadBiasStreamsLOOP_VITIS_LOOP_240_1'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.14 seconds. CPU system time: 0 seconds. Elapsed time: 0.14 seconds; current allocated memory: 455.125 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadWeightStreamsLOOP' pipeline 'ReadWeightStreamsLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadWeightStreamsLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.42 seconds. CPU system time: 0.02 seconds. Elapsed time: 0.44 seconds; current allocated memory: 455.125 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_ReadActivationsLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_ReadActivationsLOOP' pipeline 'ReadActivationsLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-100] Generating core module 'mux_53_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_ReadActivationsLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 0.77 seconds. CPU system time: 0.01 seconds. Elapsed time: 0.78 seconds; current allocated memory: 455.125 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' 
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-1030] Apply Unified Pipeline Control on module 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' pipeline 'OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' pipeline type 'loop pipeline'
INFO: [RTGEN 206-104] Estimated max fanout for 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP' is 12945 from HDL expression: (1'b0 == ap_block_pp0_stage0_11001)
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_10s_11_4_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_11s_12_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_8ns_2s_32s_32_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_11s_12_4_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_12s_12_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mac_muladd_9s_2s_32s_32_4_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_2ns_12_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_3ns_13_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_13ns_3ns_16_1_1': 3 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_16ns_30s_32_1_1': 4 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32s_2ns_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_30s_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_8ns_2s_10_1_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_9s_2s_11_1_1': 112 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mux_42_32_1_1': 16 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mux_53_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'urem_12ns_4ns_4_16_1': 2 instance(s).
INFO: [RTGEN 206-100] Finished creating RTL model for 'conv_w2_Pipeline_OutYLOOP_FilterLOOP_KernelXLOOP_ChannelLOOP'.
INFO: [HLS 200-111] Finished Creating RTL model: CPU user time: 2.72 seconds. CPU system time: 0.04 seconds. Elapsed time: 2.77 seconds; current allocated memory: 503.531 MB.
INFO: [HLS 200-10] ----------------------------------------------------------------
INFO: [HLS 200-10] -- Generating RTL for module 'conv_w2' 
INFO: [HLS 200-10] ----------------------------------------------------------------
WARNING: [RTGEN 206-101] Design contains AXI ports. Reset is fixed to synchronous and active low.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_data_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_keep_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_strb_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_in_V_last_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_data_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_keep_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_strb_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/strm_out_V_last_V' to 'axis' (register, both mode).
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/numFilters' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/numKernels' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/inputMapSizeX' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/inputMapSizeY' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on port 'conv_w2/ctrl' to 's_axilite & ap_none'.
INFO: [RTGEN 206-500] Setting interface mode on function 'conv_w2' to 's_axilite & ap_ctrl_hs'.
INFO: [RTGEN 206-100] Bundling port 'numFilters', 'numKernels', 'inputMapSizeX', 'inputMapSizeY', 'ctrl' and 'return' to AXI-Lite port BUS1.
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_34ns_44_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_44ns_54_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_10ns_54ns_64_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_30s_32s_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_30s_3ns_32_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32ns_2ns_34_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_32s_32s_32_1_1': 2 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_28ns_31_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_31ns_34_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_3ns_3ns_6_1_1': 1 instance(s).
INFO: [RTGEN 206-100] Generating core module 'mul_mul_6ns_28s_32_4_1': 1 instance(s).
INFO: ==============================================================
Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
Tool Version Limit: 2019.12
Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
==============================================================
