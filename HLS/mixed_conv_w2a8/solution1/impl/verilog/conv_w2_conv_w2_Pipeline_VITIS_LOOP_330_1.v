// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_w2_conv_w2_Pipeline_VITIS_LOOP_330_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        streamsPerInputLine,
        inputMapLineAddr_4_out,
        inputMapLineAddr_4_out_ap_vld,
        inputMapLineAddr_3_out,
        inputMapLineAddr_3_out_ap_vld,
        inputMapLineAddr_2_out,
        inputMapLineAddr_2_out_ap_vld,
        inputMapLineAddr_1_out,
        inputMapLineAddr_1_out_ap_vld,
        inputMapLineAddr_out,
        inputMapLineAddr_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] streamsPerInputLine;
output  [31:0] inputMapLineAddr_4_out;
output   inputMapLineAddr_4_out_ap_vld;
output  [31:0] inputMapLineAddr_3_out;
output   inputMapLineAddr_3_out_ap_vld;
output  [31:0] inputMapLineAddr_2_out;
output   inputMapLineAddr_2_out_ap_vld;
output  [31:0] inputMapLineAddr_1_out;
output   inputMapLineAddr_1_out_ap_vld;
output  [31:0] inputMapLineAddr_out;
output   inputMapLineAddr_out_ap_vld;

reg ap_idle;
reg inputMapLineAddr_4_out_ap_vld;
reg inputMapLineAddr_3_out_ap_vld;
reg inputMapLineAddr_2_out_ap_vld;
reg inputMapLineAddr_1_out_ap_vld;
reg inputMapLineAddr_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln330_fu_127_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [2:0] i_fu_42;
wire   [2:0] add_ln330_fu_133_p2;
wire    ap_loop_init;
wire   [2:0] i_1_load_fu_121_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] inputMapLineAddr_fu_46;
reg   [31:0] inputMapLineAddr_1_fu_50;
reg   [31:0] inputMapLineAddr_2_fu_54;
reg   [31:0] inputMapLineAddr_5_fu_58;
wire   [31:0] add_ln332_fu_139_p2;
reg   [31:0] inputMapLineAddr_3_fu_62;
reg   [31:0] inputMapLineAddr_4_fu_66;
wire    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

conv_w2_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_42 <= 3'd0;
        end else if (((icmp_ln330_fu_127_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_42 <= add_ln330_fu_133_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            inputMapLineAddr_5_fu_58 <= 32'd0;
        end else if (((icmp_ln330_fu_127_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            inputMapLineAddr_5_fu_58 <= add_ln332_fu_139_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((i_1_load_fu_121_p1 == 3'd1) & (icmp_ln330_fu_127_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputMapLineAddr_1_fu_50 <= inputMapLineAddr_5_fu_58;
    end
end

always @ (posedge ap_clk) begin
    if (((i_1_load_fu_121_p1 == 3'd2) & (icmp_ln330_fu_127_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputMapLineAddr_2_fu_54 <= inputMapLineAddr_5_fu_58;
    end
end

always @ (posedge ap_clk) begin
    if (((i_1_load_fu_121_p1 == 3'd3) & (icmp_ln330_fu_127_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputMapLineAddr_3_fu_62 <= inputMapLineAddr_5_fu_58;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_1_load_fu_121_p1 == 3'd1) & ~(i_1_load_fu_121_p1 == 3'd0) & ~(i_1_load_fu_121_p1 == 3'd3) & ~(i_1_load_fu_121_p1 == 3'd2) & (icmp_ln330_fu_127_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputMapLineAddr_4_fu_66 <= inputMapLineAddr_5_fu_58;
    end
end

always @ (posedge ap_clk) begin
    if (((i_1_load_fu_121_p1 == 3'd0) & (icmp_ln330_fu_127_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputMapLineAddr_fu_46 <= inputMapLineAddr_5_fu_58;
    end
end

always @ (*) begin
    if (((icmp_ln330_fu_127_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln330_fu_127_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputMapLineAddr_1_out_ap_vld = 1'b1;
    end else begin
        inputMapLineAddr_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln330_fu_127_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputMapLineAddr_2_out_ap_vld = 1'b1;
    end else begin
        inputMapLineAddr_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln330_fu_127_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputMapLineAddr_3_out_ap_vld = 1'b1;
    end else begin
        inputMapLineAddr_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln330_fu_127_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputMapLineAddr_4_out_ap_vld = 1'b1;
    end else begin
        inputMapLineAddr_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln330_fu_127_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputMapLineAddr_out_ap_vld = 1'b1;
    end else begin
        inputMapLineAddr_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln330_fu_133_p2 = (i_fu_42 + 3'd1);

assign add_ln332_fu_139_p2 = (inputMapLineAddr_5_fu_58 + streamsPerInputLine);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign i_1_load_fu_121_p1 = i_fu_42;

assign icmp_ln330_fu_127_p2 = ((i_fu_42 == 3'd5) ? 1'b1 : 1'b0);

assign inputMapLineAddr_1_out = inputMapLineAddr_1_fu_50;

assign inputMapLineAddr_2_out = inputMapLineAddr_2_fu_54;

assign inputMapLineAddr_3_out = inputMapLineAddr_3_fu_62;

assign inputMapLineAddr_4_out = inputMapLineAddr_4_fu_66;

assign inputMapLineAddr_out = inputMapLineAddr_fu_46;

endmodule //conv_w2_conv_w2_Pipeline_VITIS_LOOP_330_1
